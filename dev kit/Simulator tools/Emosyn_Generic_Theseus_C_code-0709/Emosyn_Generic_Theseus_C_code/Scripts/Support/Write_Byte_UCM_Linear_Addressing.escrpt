>ID:escrpt
>VER1
>LIST

;******************************************************************************
; Write_Byte_UCM_Linear_Addressing.escrpt
; =======================================
;
; $Revision: 1.1 $
; $Author: chin $ 
; $Date: 2005/11/01 13:54:53 $
;
; Generic script that writes a byte value to UCM space in Linear Addressing mode
; (3 byte addressing, over 64K address range)
; 
; 1. Set the DPX value in the chip to the correct start value
; 2. Read UCM area checking it is all FFh
; 3. Set the DPX value in the chip to the correct start value
; 4. Write 00h to the entire UCM space excluding the generic software code
; 5. Set the DPX value in the chip to the correct start value
; 6. Read back entire area checking all bytes are now 00h
;******************************************************************************


>SETVB: bDPX_Address = (UCM_USABLE_DPX_START_ADDRESS)				; Set the DPX start address to the UCM where GSW code ends
>SETVW: wAddress = (UCM_USABLE_START_ADDRESS)					; Set the start address to the UCM where GSW code ends
>SETVB: bContinue_Loop = 01							; Variable to exit process loops


;*******************************************************************************
; 1. Set the DPX value in the chip to the correct start value
;*******************************************************************************
>APDU: E5 (Load_DPX) (UCM_USABLE_DPX_START_ADDRESS) 00 -- --			; Set DPX to start where the generic code ends
>COMP: SW1SW2 = 9000								; Check the operation was completed successfully

;******************************************************************************
; 2. Read UCM area checking it is all FFh
;******************************************************************************
>DISPLAY0: Checking UCM bytes are all FFh 

>WHILE: (bContinue_Loop) = 01							; Keep looping until variable to exit is reset

    >APDU: E5 (XDATA_Space_Memory_Dump) (wAddress) -- 00


    >CALC: wAddress = (wAddress) + 0100						; Point to the next address

    >IF: (wAddress) = 0000							; If address has reached 0000 increment DPX
        >CALC: bDPX_Address = (bDPX_Address) + 01
        >APDU: E5 (Load_DPX) (bDPX_Address) 00 -- --
        >COMP: SW1SW2 = 9000							; Check the operation was completed successfully
    >ENDIF

    >IF: (wAddress) = (UCM_END_ADDRESS)						; Check if the end of usable UCM has been reached
        >IF: (bDPX_Address) = (UCM_DPX_END_ADDRESS)				; Check if the end of usable UCM DPX has been reached
            >SETVB: bContinue_Loop = 00						; If so reset variable to exit this loop
        >ENDIF
    >ENDIF
>LOOP

>SETVB: bDPX_Address = (UCM_USABLE_DPX_START_ADDRESS)				; Set the DPX start address to the UCM where GSW code ends
>SETVW: wAddress = (UCM_USABLE_START_ADDRESS)					; Set the start address to the UCM where GSW code ends
>SETVB: bContinue_Loop = 01							; Variable to exit process loops

;*******************************************************************************
; 3. Set the DPX value in the chip to the correct start value
;*******************************************************************************
>APDU: E5 (Load_DPX) (UCM_USABLE_DPX_START_ADDRESS) 00 -- --			; Set DPX to start where the generic code ends
>COMP: SW1SW2 = 9000								; Check the operation was completed successfully

;******************************************************************************
; 4. Write 00h to the entire UCM space excluding the generic software code
;******************************************************************************
>WHILE: (bContinue_Loop) = 01							; Keep looping until variable to exit is reset

    >DISPLAY0: Writing byte 00h at address (bDPX_Address)(wAddress)h

    >APDU: E5 (Linear_Write_Byte_NVM) 00 00 04 -- (bDPX_Address) (wAddress) 00	; Write the byte using the linear addressing call
    >COMP: SW1SW2 = 9000

    >CALC: wAddress = (wAddress) + 0001						; Point to the next address

    >IF: (wAddress) = 0000							; If address has reached 0000 increment DPX
        >CALC: bDPX_Address = (bDPX_Address) + 01
        >APDU: E5 (Load_DPX) (bDPX_Address) 00 -- --
        >COMP: SW1SW2 = 9000							; Check the operation was completed successfully
    >ENDIF

    >IF: (wAddress) = (UCM_END_ADDRESS)						; Check if the end of usable UCM has been reached
        >IF: (bDPX_Address) = (UCM_DPX_END_ADDRESS)				; Check if the end of usable UCM DPX has been reached
            >SETVB: bContinue_Loop = 00						; If so reset variable to exit this loop
        >ENDIF
    >ENDIF
>LOOP

>SETVB: bDPX_Address = (UCM_USABLE_DPX_START_ADDRESS)				; Set the DPX start address to the UCM where GSW code ends
>SETVW: wAddress = (UCM_USABLE_START_ADDRESS)					; Set the start address to the UCM where GSW code ends
>SETVB: bContinue_Loop = 01							; Variable to exit process loops

;*******************************************************************************
; 5. Set the DPX value in the chip to the correct start value
;*******************************************************************************
>APDU: E5 (Load_DPX) (UCM_USABLE_DPX_START_ADDRESS) 00 -- --			; Set DPX to start where the generic code ends
>COMP: SW1SW2 = 9000								; Check the operation was completed successfully

;******************************************************************************
; 6. Read back entire area checking all bytes are now 00h
;******************************************************************************
>DISPLAY0: Checking UCM bytes are all 00h 

>WHILE: (bContinue_Loop) = 01							; Keep looping until variable to exit is reset

    >APDU: E5 (XDATA_Space_Memory_Dump) (wAddress) -- 00
    >COMP: RAPDU = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

    >CALC: wAddress = (wAddress) + 0100						; Point to the next address

    >IF: (wAddress) = 0000							; If address has reached 0000 increment DPX
        >CALC: bDPX_Address = (bDPX_Address) + 01
        >APDU: E5 (Load_DPX) (bDPX_Address) 00 -- --
        >COMP: SW1SW2 = 9000							; Check the operation was completed successfully
    >ENDIF

    >IF: (wAddress) = (UCM_END_ADDRESS)						; Check if the end of usable UCM has been reached
        >IF: (bDPX_Address) = (UCM_DPX_END_ADDRESS)				; Check if the end of usable UCM DPX has been reached
            >SETVB: bContinue_Loop = 00						; If so reset variable to exit this loop
        >ENDIF
    >ENDIF
>LOOP

>ENDL