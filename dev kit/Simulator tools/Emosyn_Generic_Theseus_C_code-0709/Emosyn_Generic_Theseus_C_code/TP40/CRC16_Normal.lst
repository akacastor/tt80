C51 COMPILER V8.05a   CRC16_NORMAL                                                         05/08/2007 13:43:12 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE CRC16_NORMAL
OBJECT MODULE PLACED IN .\CRC16_Normal.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\Common\CRC16_Normal.c BROWSE INTVECTOR(0X8000) DEBUG OBJECTEXTEND PRINT(
                    -.\CRC16_Normal.lst) OBJECT(.\CRC16_Normal.obj)

line level    source

   1          /******************************************************************************
   2          *
   3          * Name:         CRC16_Normal.c
   4          * Description:  Contains functions to calculates the Cyclic Redundancy Checksum
   5          *               on data passed on
   6          * Copyright:    Emosyn Inc. 2005
   7          *
   8          * The Example Code herein below is provided "AS IS" and at your sole risk.  
   9          * As to this Code, EMOSYN expressly disclaims all warranties, including, but
  10          * not limited to the implied warranties of merchantability and fitness for a
  11          * particular purpose. EMOSYN does not warrant that the functions contained in
  12          * this code will meet your requirements, or that the operation of the code will
  13          * be accurate, error-free, or non-infringing. No oral or written information or
  14          * advice given by EMOSYN or an authorized representative shall create or affect
  15          * any Warranty.
  16          *******************************************************************************
  17          * $Revision: 1.4 $
  18          * $Author: chin $ 
  19          * $Date: 2005/11/09 12:58:25 $
  20          ******************************************************************************/
  21          
  22          
  23          /******************************************************************************
  24          * Header file inclusions
  25          ******************************************************************************/
  26          #include "Firmware_API_JumpTable.h"
  27          #include "Emosyn_Helper_Functions.h"
  28          
  29          
  30          /******************************************************************************
  31          * External and local function declarations 
  32          ******************************************************************************/
  33          uint CalculateCRC (uchar xdata *ucpStartAddress, uint uiInitRemainder, uint uiLen);
  34          
  35          /******************************************************************************
  36          * External variable declarations
  37          ******************************************************************************/
  38          
  39          
  40          const code CRC16_LookUp_Table[] = {
  41              0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
  42              0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
  43              0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
  44              0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
  45              0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
  46              0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
  47              0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
  48              0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
  49              0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
  50              0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
  51              0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
  52              0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
  53              0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
  54              0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
C51 COMPILER V8.05a   CRC16_NORMAL                                                         05/08/2007 13:43:12 PAGE 2   

  55              0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
  56              0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
  57              0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
  58              0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
  59              0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
  60              0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
  61              0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
  62              0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
  63              0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
  64              0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
  65              0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
  66              0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
  67              0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
  68              0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
  69              0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
  70              0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
  71              0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
  72              0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
  73          };
  74          
  75          
  76          /******************************************************************************
  77          *
  78          * Function Name:      Create_CRC16_Hash_Of_XDATA
  79          * Function Inputs:    void
  80          * Function Outputs:   uint SW1SW2  9000h for success or
  81          *                                  6C00h for wrong LE
  82          * Description:        CRC hash 256 bytes of XDATA starting from input parameter address
  83          *
  84          * APDU Syntax:        E5 88 PARA1 PARA2 02
  85          * APDU Inputs:        PARA1  High byte of address in XDATA to start CRC from
  86          *                     PARA2  Low byte of address in XDATA to start CRC from
  87          * APDU Outputs:       None
  88          *
  89          * Example usage:      CRC hash 100h bytes of XDATA starting from 1234h
  90          * To Card             ->  E5 88 12 34 02
  91          * ACK from Card       <-  88
  92          * Data from Card      <-  2 byte CRC ouptut
  93          * Response from Card  <-  90 00
  94          *
  95          ******************************************************************************/
  96          uint Create_CRC16_Hash_Of_XDATA (void)
  97          {
  98   1              uint CRC_Value = 0x0000;            /* Inialise CRC output */
  99   1      
 100   1          if (PARA3 == 0x02)
 101   1          {
 102   2              XDATA_PTR = (PARA1 << 8) + PARA2;  /* Calculate input address */
 103   2      
 104   2              CRC_Value = CalculateCRC (XDATA_PTR, CRC_Value, 0x100);
 105   2      
 106   2              PutChar (CRC_Value >> 8);           /* Output high byte of CRC value */
 107   2              PutChar (CRC_Value & 0xFF);         /* Output low byte of CRC value */
 108   2      
 109   2              SW1SW2 = SW1SW2_OK;                 /* Return 9000h SW1SW2 */
 110   2          }
 111   1          else
 112   1          {
 113   2              SW1SW2 = SW1SW2_WRONG_LE_LENGTH;
 114   2          }
 115   1      
 116   1          return SW1SW2;                          /* Return SW1SW2 */
C51 COMPILER V8.05a   CRC16_NORMAL                                                         05/08/2007 13:43:12 PAGE 3   

 117   1      
 118   1      } /* End of function */
 119          
 120          
 121          /******************************************************************************
 122          *
 123          * Function Name:      CalculateCRC
 124          * Function Inputs:    uchar *ucpStartAddress  XDATA source address to start hash
 125          *                     uint  uiInitRemainder   CRC hash result variable
 126          *                     uint  uiLen             Length of data to hash, normally 256 bytes
 127          * Function Outputs:   uint  uiInitRemainder   CRC hash result variable
 128          * Description:        CRC hash 256 bytes of XDATA starting from input parameter address
 129          *
 130          *******************************************************************************/
 131          uint CalculateCRC (uchar xdata *ucpStartAddress, uint uiInitRemainder, uint uiLen)
 132          {
 133   1          for (uiLen; uiLen > 0; uiLen--)
 134   1              {
 135   2              uiInitRemainder = (uiInitRemainder >> 8) ^ CRC16_LookUp_Table[*ucpStartAddress++ ^ (uiInitRemainde
             -r & 0xFF)];
 136   2              }
 137   1      
 138   1          return uiInitRemainder;
 139   1      
 140   1      } /* End of function */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    157    ----
   CONSTANT SIZE    =    512    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
