C51 COMPILER V7.50   MAIN                                                                  12/12/2006 14:05:39 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\Common\Main.c OMF2 ROM(D512K) OPTIMIZE(SIZE) BROWSE INTVECTOR(0X0800) DE
                    -FINE(EXTENDED_ADDRESSING) VARBANKING DEBUG PRINT(.\Main.lst) OBJECT(.\Main.obj)

line level    source

   1          /******************************************************************************
   2          *
   3          * Name:         Main .c
   4          * Description:  Contains main C entry function + additional supporting functions
   5          * Copyright:    Emosyn Inc. 2005
   6          *
   7          * The Example Code herein below is provided "AS IS" and at your sole risk.  
   8          * As to this Code, EMOSYN expressly disclaims all warranties, including, but
   9          * not limited to the implied warranties of merchantability and fitness for a
  10          * particular purpose. EMOSYN does not warrant that the functions contained in
  11          * this code will meet your requirements, or that the operation of the code will
  12          * be accurate, error-free, or non-infringing. No oral or written information or
  13          * advice given by EMOSYN or an authorized representative shall create or affect
  14          * any Warranty.
  15          *******************************************************************************
  16          * $Revision: 1.12 $
  17          * $Author: chin $ 
  18          * $Date: 2006/03/08 16:39:29 $
  19          ******************************************************************************/
  20          
  21          
  22          /******************************************************************************
  23          * Header file inclusions
  24          ******************************************************************************/
  25          #include <intrins.h> /* Includes the _nop_() function for C code */
  26          #include "Firmware_API_JumpTable.h"
  27          #include "Emosyn_Helper_Functions.h"
  28          #include "APDU_Command_Definition.h"
  29          #include "Emosyn_Clock_Speeds.h"
  30          
  31          
  32          /******************************************************************************
  33          * External and local function declarations 
  34          ******************************************************************************/
  35          extern void Chip_Init (void);
  36          extern void Send_ATR (void);
  37          extern void ISO_Select_Speed (uchar FiDi, uchar ucCommand_Type);
  38          
  39          void Process_PPS_Command (void);
  40          void Process_APDU_Command (void);
  41          void Enter_Idle_Mode (uchar ucIdleMode);
  42          
  43          
  44          /******************************************************************************
  45          * External variable declarations
  46          ******************************************************************************/
  47          
  48          
  49          /******************************************************************************
  50          *
  51          * Function Name:      main
  52          * Function Inputs:    void
  53          * Function Outputs:   void
  54          * Description:        Main function calls chip initialistion & Send ATR function
C51 COMPILER V7.50   MAIN                                                                  12/12/2006 14:05:39 PAGE 2   

  55          *                     It then goes into idle mode. Chip wakes up on receving a
  56          *                     char from the serial port, it then starts the process of
  57          *                     decoding and executing the APDU command
  58          *
  59          *******************************************************************************/
  60          void main (void)
  61          {
  62   1          Chip_Init();                /* Initialises clock, serial port */
  63   1      
  64   1          Send_ATR();                 /* Transmit the chip specified ATR */
  65   1      
  66   1          Enter_Idle_Mode (IDLE_MODE);/* Go into idle mode until a char is received */
  67   1      
  68   1          /*******************************************************************/
  69   1          /* After the ATR has been sent always check the first APDU command */
  70   1          /* to see if it a PPS command (4 byte command), otherwise always   */
  71   1          /* get a standard 5 byte APDU command                              */
  72   1          /*******************************************************************/
  73   1      
  74   1          CLA = GetChar();            /* Get the first byte */
  75   1      
  76   1          if (CLA == PPS_CLA)         /* If 1st APDU byte is 0xFF it's a PPS command */
  77   1          {
  78   2              Process_PPS_Command();
  79   2          }
  80   1          else                        /* Else receive the rest of APDU command (4 bytes) */
  81   1          {
  82   2              Serial_Receive_X_Bytes (APDU_HEADER_LENGTH - 1, &INS);
  83   2              Process_APDU_Command();
  84   2          }
  85   1      
  86   1          /************************************************************/
  87   1          /* This is the main loop that waits in specific idle mode   */
  88   1          /* It wakes up and comes active when a character is received */
  89   1          /* It will then process the APDU command                    */
  90   1          /************************************************************/
  91   1          while (1)
  92   1          {
  93   2              /* Switch chip to normal idle or deep idle (use ISO clock) */
  94   2              Enter_Idle_Mode(IDLE_MODE);
  95   2      
  96   2              /* Get 5 byte APDU, should always do this after the 1st ever APDU command */
  97   2              Serial_Receive_X_Bytes (APDU_HEADER_LENGTH, &CLA);
  98   2      
  99   2              Process_APDU_Command();
 100   2              } /* Forever loop */
 101   1      
 102   1      } /* End of main function */
 103          
 104          
 105          /******************************************************************************
 106          *
 107          * Function Name:      Process_PPS_Command
 108          * Function Inputs:    void
 109          * Function Outputs:   void
 110          * Description:        Processes PPS command, changing the timer when necessary
 111          *
 112          ******************************************************************************/
 113           void Process_PPS_Command (void)
 114          {
 115   1          /* Read in rest of PPS command (3 bytes), already got the CLA */
 116   1          Serial_Receive_X_Bytes (APDU_HEADER_LENGTH - 2, &INS);
C51 COMPILER V7.50   MAIN                                                                  12/12/2006 14:05:39 PAGE 3   

 117   1      
 118   1          /* Call function to change ISO serial timer */
 119   1          ISO_Select_Speed (PARA1, PPS_BAUD_CMD);
 120   1      
 121   1      } /* End of function */
 122          
 123          
 124          /******************************************************************************
 125          *
 126          * Function Name:      Enter_Idle_Mode
 127          * Function Inputs:    Idle mode type deep idle = 1; normal idle = 0
 128          * Function Outputs:   void
 129          * Description:        Puts chip into normal or deep idle (internal clock stopped)
 130          *
 131          ******************************************************************************/
 132          void Enter_Idle_Mode (uchar ucIdleMode)
 133          {
 134   1          if (ucIdleMode == NORMAL_IDLE_MODE) 
 135   1          {
 136   2              PCON |= 0x01;   /* Set the SFR bit that puts the processor into idle mode */
 137   2      
 138   2              _nop_ ();
 139   2              _nop_ ();
 140   2              _nop_ ();
 141   2              _nop_ ();
 142   2              _nop_ ();
 143   2          }
 144   1          else if (ucIdleMode == DEEP_IDLE_MODE) 
 145   1          {
 146   2              /* Save the Clock multiplier and divider ratios currently used by the chip */
 147   2              /* This is so the Clock values can be restored after waking up from idle */
 148   2              TEMPVARIABLE2 = Firmware_GetClockControlSFR();
 149   2      
 150   2              TEMPVARIABLE1 = TEMPVARIABLE2 & 0x0F; /* Clock Divider (lower nibble)*/
 151   2      
 152   2              TEMPVARIABLE2 = (TEMPVARIABLE2 & 0xF0) >> 4; /* Clock Multiplier (upper nibble) */
 153   2      
 154   2              TEMPVARIABLE3 = Firmware_GetClockSourceSelectSFR(); /* Get the clock source */
 155   2      
 156   2              /***********************************************************
 157   2               * Note
 158   2               * The values for clock settings differ from 
 159   2               * Firmware_GetClockSourceSelectSFR to Firmware_SetClock
 160   2               *
 161   2               * Firmware_GetClockSourceSelectSFR    Firmware_SetClock
 162   2               * 00 - ISO Clock Source               00 - Int Clock Source
 163   2               * 01 - PLL Clock Source               01 - PLL Clock Source
 164   2               * 02 - Int Clock Source               02 - ISO Clock Source
 165   2               * So the conversion code below is necessary         
 166   2              ***********************************************************/
 167   2      
 168   2              if (TEMPVARIABLE3 & 0x02)       /* 0x00 = Int Osc for Firmware_SetClock */
 169   2              {
 170   3                  TEMPVARIABLE3 = INT_OSC;
 171   3              }
 172   2              else if (TEMPVARIABLE3 & 0x01)  /* 0x01 = PLL for Firmware_SetClock */
 173   2              {
 174   3                  TEMPVARIABLE3 = PLL_CLOCK;
 175   3              }
 176   2              else                            /* 0x02 = ISOCLK for Firmware_SetClock */
 177   2              {
 178   3                  TEMPVARIABLE3 = ISO_CLOCK;
C51 COMPILER V7.50   MAIN                                                                  12/12/2006 14:05:39 PAGE 4   

 179   3              }
 180   2      
 181   2              /* Run the processor from the ISO clock, no multiplier & no divisor value */
 182   2              Firmware_SetClock (ISO_CLOCK, MULTIPLY_BY_01_RATIO, DIVIDE_BY_01_RATIO);
 183   2      
 184   2              PCON |= 0x01;       /* Set the SFR that puts the processor into idle mode */
 185   2      
 186   2              _nop_ ();
 187   2              _nop_ ();
 188   2              _nop_ ();
 189   2              _nop_ ();
 190   2              _nop_ ();
 191   2      
 192   2              /* Restore all the previous clock values */
 193   2              Firmware_SetClock (TEMPVARIABLE3, TEMPVARIABLE2, TEMPVARIABLE1);
 194   2      
 195   2          } /* End of deep idle process */
 196   1      
 197   1      }  /* End of function */
 198          
 199          
 200          /******************************************************************************
 201          *
 202          * Function Name:      Process_APDU_Command
 203          * Function Inputs:    void
 204          * Function Outputs:   void
 205          * Description:        APDU command functions are listed sequentially as
 206          *                     addresses in an array. The index for the array is the
 207          *                     INS value (divided by 2 as INS can only be even). If
 208          *                     there is no address for the INS value index it means NO
 209          *                     function is available for this INS value (it will have
 210          *                     an 0xFFFF (NO_ENTRY) entry for its address)
 211          *                     If a function address does exist for the APDU entry a
 212          *                     function pointer refernces it
 213          *
 214          *                     See APDU_Command_Definition.h in the chip specfic
 215          *                     directory for more detail
 216          *
 217          ******************************************************************************/
 218          void Process_APDU_Command (void)
 219          {
 220   1          /* If not a valid CLA value return 0x6E00 */
 221   1          if (CLA != EMOSYN_CLA)
 222   1          {
 223   2              SW1SW2 = SW1SW2_CLA_NOT_SUPPORTED;
 224   2          }
 225   1      
 226   1          /* If INS value is an odd number return error */
 227   1          else if (INS & 0x01)
 228   1          {
 229   2              SW1SW2 = SW1SW2_INS_NOT_SUPPORTED;
 230   2          }
 231   1      
 232   1          /******************************************
 233   1           * INS values are even always even!
 234   1           * Array for APDU function addresses are 
 235   1           * organised sequentially
 236   1           * A division of the INS value by 2 is 
 237   1           * required to access the array entry for a
 238   1           * particular INS command
 239   1          ******************************************/
 240   1      
C51 COMPILER V7.50   MAIN                                                                  12/12/2006 14:05:39 PAGE 5   

 241   1          /* Check if the function address value for this particular APDU INS */
 242   1          /* value in the INS_FPTR table is valid (not equal to 0xFFFF) */
 243   1      
 244   1      #ifndef EXTENDED_ADDRESSING
              
                  else if (INS_FPTR[INS / 2] != (uint)NO_ENTRY)
              
              #else
 249   1      
 250   1          else if (INS_FPTR[INS / 2] != NO_ENTRY)
 251   1      
 252   1      #endif
 253   1          {   
 254   2              /*************************************************************/
 255   2              /* The #ifdef below is designed to give the user the ability */
 256   2              /* to remove the ACK byte (INS) for APDU communications      */
 257   2              /* The example below does not return an ACK for the          */
 258   2              /* Erase_256_UCM command. To execute, insert the define in   */
 259   2              /* Project Options\C51\Preprocessor Symbols\Define           */
 260   2              /*************************************************************/
 261   2      #ifdef NO_ACK_BYTE_RETURN
              
                      if (INS != 0x2C)
                      {
                          PutChar (INS); /* Output the INS as an ack */
                      }
              
              #else
 269   2      
 270   2              PutChar (INS); /* Output the INS as an ack */
 271   2      
 272   2      #endif        
 273   2      
 274   2      
 275   2              /* Call the function listed in the INS_FPTR table */
 276   2      #ifndef EXTENDED_ADDRESSING
              
                      /* Function pointer (2 bytes) referencing */
                      SW1SW2 = ((uint (code*) (void)) INS_FPTR[INS / 2])();
              
              #else
 282   2      
 283   2              /* Function pointer (3 bytes) referencing */
 284   2              SW1SW2 = ((uint (*) (void)) INS_FPTR[INS / 2])();
 285   2      
 286   2      #endif
 287   2          }
 288   1      
 289   1          /* INS value has no function associated with it */    
 290   1          else
 291   1          {
 292   2              SW1SW2 = SW1SW2_INS_NOT_SUPPORTED;
 293   2          }
 294   1      
 295   1          /* Only output SW1SW2 if required, not required for Change_ISO_Speed() */
 296   1          if (SW1SW2 != NO_SW1SW2)
 297   1          {
 298   2              Serial_Transmit_X_Bytes (2, (uchar *)&SW1SW2);
 299   2          }
 300   1      
 301   1      } /* End of function */

C51 COMPILER V7.50   MAIN                                                                  12/12/2006 14:05:39 PAGE 6   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    288    ----
   CONSTANT SIZE    =    384    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
