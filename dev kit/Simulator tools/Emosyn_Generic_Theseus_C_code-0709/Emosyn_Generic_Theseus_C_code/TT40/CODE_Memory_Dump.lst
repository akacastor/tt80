C51 COMPILER V8.05a   CODE_MEMORY_DUMP                                                     05/29/2007 11:00:53 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE CODE_MEMORY_DUMP
OBJECT MODULE PLACED IN .\CODE_Memory_Dump.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\Common\CODE_Memory_Dump.c OMF2 OPTIMIZE(SIZE) BROWSE INTVECTOR(0X0400) M
                    -ODDP2 DEBUG PRINT(.\CODE_Memory_Dump.lst) OBJECT(.\CODE_Memory_Dump.obj)

line level    source

   1          /******************************************************************************
   2          *
   3          * Name:         CODE_Memory_Dump.c
   4          * Description:  Contains function to output data from CODE space
   5          * Copyright:    Emosyn Inc. 2005
   6          *
   7          * The Example Code herein below is provided "AS IS" and at your sole risk.  
   8          * As to this Code, EMOSYN expressly disclaims all warranties, including, but
   9          * not limited to the implied warranties of merchantability and fitness for a
  10          * particular purpose. EMOSYN does not warrant that the functions contained in
  11          * this code will meet your requirements, or that the operation of the code will
  12          * be accurate, error-free, or non-infringing. No oral or written information or
  13          * advice given by EMOSYN or an authorized representative shall create or affect
  14          * any Warranty.
  15          *******************************************************************************
  16          * $Revision: 1.1 $
  17          * $Author: chin $ 
  18          * $Date: 2005/08/09 11:53:42 $
  19          ******************************************************************************/
  20          
  21          
  22          /******************************************************************************
  23          * Header file inclusions
  24          ******************************************************************************/
  25          #include "Firmware_API_JumpTable.h"
  26          #include "Emosyn_Helper_Functions.h"
  27          
  28          
  29          /******************************************************************************
  30          * External and local function declarations 
  31          ******************************************************************************/
  32          
  33          
  34          /******************************************************************************
  35          * External variable declarations
  36          ******************************************************************************/
  37          
  38          
  39          /******************************************************************************
  40          *
  41          * Function Name:      CODE_Memory_Dump
  42          * Function Inputs:    void
  43          * Function Outputs:   uint SW1SW2_OK  9000h
  44          * Description:        
  45          *
  46          * APDU Syntax:        E5 7A PARA1 PARA2 PARA3
  47          * APDU Inputs:        PARA1  High byte of the CODE address space of data
  48          *                     PARA2  Low byte of the CODE address space of data
  49                                PARA3  Number of bytes to output
  50          * APDU Outputs:       (PARA3) number of CODE data bytes
  51          *
  52          * Example usage:      Output 56h bytes starting from address 1234h in CODE space
  53          * To Card             ->  E5 7A 12 34 56
  54          * ACK from Card       <-  7A
C51 COMPILER V8.05a   CODE_MEMORY_DUMP                                                     05/29/2007 11:00:53 PAGE 2   

  55          * Data from Card      ->  Byte1 Byte2 Byte3...ByteX
  56          * Response from Card  <-  90 00
  57          *
  58          ******************************************************************************/
  59          uint CODE_Memory_Dump (void)
  60          {
  61   1          CODE_PTR = (PARA1 << 8) + PARA2;
  62   1      
  63   1          /* A DO-WHILE loop enables 256 bytes to be sent */
  64   1          /* User needs to set PARA3 = 00 for 256 byte output */
  65   1          do
  66   1          {
  67   2              PutChar (*(CODE_PTR++));
  68   2          } while ((--PARA3) != 0);   /* Output byte until counter is zero */
  69   1      
  70   1          return SW1SW2_OK;
  71   1      
  72   1      } /* End of function */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     48    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
