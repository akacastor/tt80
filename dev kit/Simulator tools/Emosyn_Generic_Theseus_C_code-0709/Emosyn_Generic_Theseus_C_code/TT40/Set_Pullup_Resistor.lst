C51 COMPILER V8.05a   SET_PULLUP_RESISTOR                                                  05/29/2007 11:00:50 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE SET_PULLUP_RESISTOR
OBJECT MODULE PLACED IN .\Set_Pullup_Resistor.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\Common_Titanium\Set_Pullup_Resistor.c OMF2 OPTIMIZE(SIZE) BROWSE INTVECT
                    -OR(0X0400) MODDP2 DEBUG PRINT(.\Set_Pullup_Resistor.lst) OBJECT(.\Set_Pullup_Resistor.obj)

line level    source

   1          /******************************************************************************
   2          *
   3          * Name:         Set_Pullup_Resistor.c
   4          * Description:  Contains function to Set the pullup resistor status
   5          * Copyright:    Emosyn Inc. 2006
   6          *
   7          * The Example Code herein below is provided "AS IS" and at your sole risk.  
   8          * As to this Code, EMOSYN expressly disclaims all warranties, including, but
   9          * not limited to the implied warranties of merchantability and fitness for a
  10          * particular purpose. EMOSYN does not warrant that the functions contained in
  11          * this code will meet your requirements, or that the operation of the code will
  12          * be accurate, error-free, or non-infringing. No oral or written information or
  13          * advice given by EMOSYN or an authorized representative shall create or affect
  14          * any Warranty.
  15          *******************************************************************************
  16          * $Revision: 1.1 $
  17          * $Author: chin $
  18          * $Date: 2006/02/22 15:50:36 $
  19          ******************************************************************************/
  20          
  21          
  22          /******************************************************************************
  23          * Header file inclusions
  24          ******************************************************************************/
  25          #include "Firmware_API_JumpTable.h"
  26          #include "Emosyn_Helper_Functions.h"
  27          
  28          
  29          /******************************************************************************
  30          * External and local function declarations 
  31          ******************************************************************************/
  32          
  33          
  34          /******************************************************************************
  35          * External variable declarations
  36          ******************************************************************************/
  37          
  38          
  39          /******************************************************************************
  40          *
  41          * Function Name:      Set_Pullup_Resistor
  42          * Function Inputs:    None
  43          * Function Outputs:   uint SW1SW2  9000h or 6581h on error
  44          * Description:        Sets the value of PROGIO register (pullup resistor status)
  45          *                     Can be set permanently (default status on bootup) or temporary
  46          *
  47          * APDU Syntax:        E5 F0 Para1 Para2 00
  48          * APDU Inputs:        Para1  Value to set the IO Pull-Up Resistor to
  49          *                     Para2  Set Temporary (00h) or Permanently (01h)
  50          * APDU Outputs:       None
  51          *
  52          * Example usage:      Set the Pullup status to ENABLED permanently
  53          * To Card             ->  E5 F0 01 01 00
  54          * ACK from Card       <-  F0
C51 COMPILER V8.05a   SET_PULLUP_RESISTOR                                                  05/29/2007 11:00:50 PAGE 2   

  55          * Response from Card  <-  90 00
  56          *
  57          ******************************************************************************/
  58          uint Set_Pullup_Resistor (void)
  59          {
  60   1          /* Actual firmware API call */
  61   1          cRet_Val_Char = Firmware_Set_IO_Pullup (PARA1, PARA2);
  62   1      
  63   1          /* Check the firmware call result */
  64   1          if (MSB_SET & cRet_Val_Char)
  65   1          {
  66   2              SW1SW2 = SW1SW2_MEMORY_ERROR;   /* If MSB of return value set it */
  67   2          }                                   /* indicates a memory operation error */
  68   1          else
  69   1          {
  70   2              SW1SW2 = SW1SW2_OK;         /* Firmware return value was 0 or the number */
  71   2          }                               /* of pulses required for memory operation */
  72   1      
  73   1          return SW1SW2;
  74   1      
  75   1      } /* End of function */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     39    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
