C51 COMPILER V8.05a   WRITE_UCM_BYTES_FROM_IRAM_BUFFER_INTO_COD                            04/16/2007 10:40:58 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE WRITE_UCM_BYTES_FROM_IRAM_BUFFER_INTO_COD
OBJECT MODULE PLACED IN .\Write_UCM_Bytes_From_IRAM_Buffer_Into_CODE_Space.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\Common\Write_UCM_Bytes_From_IRAM_Buffer_Into_CODE_Space.c OMF2 OPTIMIZE(
                    -SIZE) BROWSE INTVECTOR(0X0800) MODDP2 DEBUG PRINT(.\Write_UCM_Bytes_From_IRAM_Buffer_Into_CODE_Space.lst) OBJECT(.\Write
                    -_UCM_Bytes_From_IRAM_Buffer_Into_CODE_Space.obj)

line level    source

   1          /******************************************************************************
   2          *
   3          * Name:         Write_UCM_Bytes_From_IRAM_Buffer_Into_CODE_Space.c
   4          * Description:  Contains function to write to UCM using data held in IDATA
   5          *               into CODE space
   6          * Copyright:    Emosyn Inc. 2005
   7          *
   8          * The Example Code herein below is provided "AS IS" and at your sole risk.  
   9          * As to this Code, EMOSYN expressly disclaims all warranties, including, but
  10          * not limited to the implied warranties of merchantability and fitness for a
  11          * particular purpose. EMOSYN does not warrant that the functions contained in
  12          * this code will meet your requirements, or that the operation of the code will
  13          * be accurate, error-free, or non-infringing. No oral or written information or
  14          * advice given by EMOSYN or an authorized representative shall create or affect
  15          * any Warranty.
  16          *******************************************************************************
  17          * $Revision: 1.5 $
  18          * $Author: chin $ 
  19          * $Date: 2005/10/31 10:04:07 $
  20          ******************************************************************************/
  21          
  22          
  23          /******************************************************************************
  24          * Header file inclusions
  25          ******************************************************************************/
  26          #include "Firmware_API_JumpTable.h"
  27          #include "Emosyn_Helper_Functions.h"
  28          
  29          
  30          /******************************************************************************
  31          * External and local function declarations 
  32          ******************************************************************************/
  33          
  34          
  35          /******************************************************************************
  36          * External variable declarations
  37          ******************************************************************************/
  38          
  39          
  40          /******************************************************************************
  41          *
  42          * Function Name:      Write_UCM_Bytes_From_IRAM_Buffer_Into_CODE_Space
  43          * Function Inputs:    void
  44          * Function Outputs:   uint SW1SW2  9000h for success or
  45          *                                  6581h for memory failure or
  46          *                                  6700h for wrong LC
  47          * Description:        Writes bytes from IDATA memory to UCM in CODE space
  48          *                     It will need to set the CODE Map bit in NvFsmMode before
  49          *                     the actual NVM operation and clear it on function exit
  50          *
  51          * APDU Syntax:        E5 D8 PARA1 PARA2 02
  52          * APDU Inputs:        PARA1      High byte of the UCM address in XDATA space
  53          *                     PARA2      Low byte of the UCM address in XDATA space
C51 COMPILER V8.05a   WRITE_UCM_BYTES_FROM_IRAM_BUFFER_INTO_COD                            04/16/2007 10:40:58 PAGE 2   

  54          *                     DataByte1  IDATA source address of the Data to write
  55          *                     DataByte2  Number of bytes to write
  56          * APDU Outputs:       None
  57          *
  58          * Example usage:      Write 20h bytes to UCM (starting at 6000h in XDATA space)
  59          *                     from IDATA starting at 40h
  60          * To Card             ->  E5 D8 60 00 02
  61          * ACK from Card       <-  D8
  62          * Data to Card        ->  40 20
  63          * Response from Card  <-  90 00
  64          *
  65          ******************************************************************************/
  66          uint Write_UCM_Bytes_From_IRAM_Buffer_Into_CODE_Space (void)
  67          {
  68   1          if (PARA3 == 0x02)
  69   1          {
  70   2              /* Get the additional data bytes (address of Idata source and number of bytes to copy) */
  71   2              Serial_Receive_X_Bytes (0x02, &TEMPVARIABLE1);
  72   2      
  73   2              /* Actual firmware API call */
  74   2              cRet_Val_Char = Firmware_WriteUCM_In_CODE_Space (Conv_Two_Bytes_To_Int (PARA1, PARA2), TEMPVARIABL
             -E1, TEMPVARIABLE2);
  75   2      
  76   2              if (MSB_SET & cRet_Val_Char) 
  77   2              {
  78   3                  SW1SW2 = SW1SW2_MEMORY_ERROR;   /* If MSB of return value is set it */
  79   3              }                                   /* indicates a memory error */
  80   2              else
  81   2              {
  82   3                  SW1SW2 = SW1SW2_OK;         /* Firmware return value was 0 or the number */
  83   3              }                               /* of pulses required for memory operation */
  84   2          }
  85   1      
  86   1          else
  87   1          {
  88   2              SW1SW2 = SW1SW2_WRONG_LC_LENGTH;    /* Wrong amount of input bytes */
  89   2          }
  90   1      
  91   1          return SW1SW2;
  92   1      
  93   1      } /* End of function */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     69    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
