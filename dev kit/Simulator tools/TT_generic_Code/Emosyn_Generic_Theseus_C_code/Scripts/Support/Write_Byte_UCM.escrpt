>ID:escrpt
>VER1
>LIST

;******************************************************************************
; Write_Byte_UCM.escrpt
; ====================
;
; $Revision: 1.3 $
; $Author: chin $ 
; $Date: 2005/11/08 17:59:09 $
;
; Generic script that writes a byte value to UCM space
; 
; 1. Read UCM area checking it is all FFh
; 2. Write 00h to the entire UCM space excluding the generic software code
; 3. Read back area checking all bytes are now 00h
; 4. Use Write Byte To UCM command with addresses not within the UCM range
;******************************************************************************


>SETVW: wAddress = (UCM_USABLE_START_ADDRESS)					; Set the start address to the UCM where GSW code ends

;******************************************************************************
; 1. Read UCM area checking it is all FFh
;******************************************************************************
>DISPLAY0: Checking UCM bytes are all FFh 

>WHILE: (wAddress) <> (UCM_END_ADDRESS)

    >APDU: E5 (XDATA_Space_Memory_Dump) (wAddress) -- 80
    >COMP: RAPDU = FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF

    >CALC: wAddress = (wAddress) + 0080						; Point to the next address

>LOOP

>SETVW: wAddress = (UCM_USABLE_START_ADDRESS)					; Reset the variable address back to usable UCM space

;******************************************************************************
; 2. Write 00h to the entire UCM space excluding the generic software code
;******************************************************************************
>WHILE: (wAddress) <> (UCM_END_ADDRESS)

    >DISPLAY0: Writing byte 00h at address (wAddress)h

    >APDU: E5 (Write_Byte_UCM_Flash_Mode) (wAddress) 01 -- 00
    >COMP: SW1SW2 = 9000

    >CALC: wAddress = (wAddress) + 0001						; Point to the next address
>LOOP

>SETVW: wAddress = (UCM_USABLE_START_ADDRESS)					; Reset the variable address back to usable UCM space

;******************************************************************************
; 3. Read back entire area checking all bytes are now 00h
;******************************************************************************
>DISPLAY0: Checking UCM bytes are all 00h 

>WHILE: (wAddress) <> (UCM_END_ADDRESS)						; Check the whole of UCM is now 00h exluding UCM where GSW code ends

    >APDU: E5 (XDATA_Space_Memory_Dump) (wAddress) -- 80
    >COMP: RAPDU = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

    >CALC: wAddress = (wAddress) + 0080						; Point to the next address
>LOOP

;******************************************************************************
; 4. Use Write Byte To UCM command with addresses not within the UCM range
;******************************************************************************
>DISPLAY0: Attempting invalid parameters in the Write Byte To UCM APDU command

>SETVW: wAddress = 0000	
>APDU: E5 (Write_Byte_UCM_Flash_Mode) (wAddress) 01 -- 00			; Attempt to write 00h to firmware space
>COMP: SW1SW2 = 6581

>SETVW: wAddress = FF00	
>APDU: E5 (Write_Byte_UCM_Flash_Mode) (wAddress) 01 -- 00			; Attempt to write 00h to last 256 bytes in memory space
>COMP: SW1SW2 = 6581

>SETVW: wAddress = (UCM_USABLE_START_ADDRESS)					; Attempt to write X bytes to first free available UCM
>APDU: E5 (Write_Byte_UCM_Flash_Mode) (wAddress) 01 -- FF			; space that already has the 00 pattern in it
>COMP: SW1SW2 = 6581