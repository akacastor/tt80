>ID:escrpt
>VER1
>LIST

;******************************************************************************
; Write_X_Bytes_To_UCM.escrpt
; ===========================
;
; $Revision: 1.3 $
; $Author: chin $ 
; $Date: 2005/11/08 17:59:09 $
;
; Generic script that writes a variable number of bytes to UCM space
; 
; 1. Read UCM area checking it is all FFh
; 2. Write 255 byte pattern to each page
; 3. Read back each page to ensure pattern has been written
; 4. Use Write X Bytes To UCM command with addresses not within the UCM range
;******************************************************************************


>SETVW: wAddress = (UCM_USABLE_START_ADDRESS)					; Set the start address to the UCM where GSW code ends

;******************************************************************************
; 1. Read UCM area checking it is all FFh
;******************************************************************************
>DISPLAY0: Checking UCM bytes are all FFh 

>WHILE: (wAddress) <> (UCM_END_ADDRESS)

    >APDU: E5 (XDATA_Space_Memory_Dump) (wAddress) -- 80
    >COMP: RAPDU = FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF

    >CALC: wAddress = (wAddress) + 0080						; Point to the next address

>LOOP

>SETVW: wAddress = (UCM_USABLE_START_ADDRESS)					; Reset the variable address back to usable UCM space

;******************************************************************************
; 2. Write 255 byte pattern to each page
;******************************************************************************
>WHILE: (wAddress) <> (UCM_END_ADDRESS)

    >DISPLAY0: Writing 255 byte pattern to address (wAddress)h

    >APDU: E5 (Write_X_Bytes_To_UCM) (wAddress
    >COMP: SW1SW2 = 9000

    >CALC: wAddress = (wAddress) + 0100						; Point to the next page start address
>LOOP

>SETVW: wAddress = (UCM_USABLE_START_ADDRESS)					; Reset the variable address back to usable UCM space

;******************************************************************************
; 3. Read back each page to ensure pattern has been written
;******************************************************************************
>DISPLAY0: Checking each page has pattern write to it

>WHILE: (wAddress) <> (UCM_END_ADDRESS)						; Check the start of the UCM page has the pattern

    >APDU: E5 (XDATA_Space_Memory_Dump) (wAddress) -- FF


    >CALC: wAddress = (wAddress) + 0100						; Point to the next page start address
>LOOP

;******************************************************************************
; 4. Use Write X Bytes To UCM command with addresses not within the UCM range
;******************************************************************************
>DISPLAY0: Attempting invalid parameters in the Write X Bytes To UCM APDU command

>SETVW: wAddress = 0000	
>APDU: E5 (Write_X_Bytes_To_UCM) (wAddress) 08 -- 00 00 00 00 00 00 00 00	; Attempt to write X bytes to firmware space
>COMP: SW1SW2 = 6581

>SETVW: wAddress = FF00	
>APDU: E5 (Write_X_Bytes_To_UCM) (wAddress) 08 -- 00 00 00 00 00 00 00 00	; Attempt to write X bytes to last 256 bytes in memory space
>COMP: SW1SW2 = 6581

>SETVW: wAddress = (UCM_USABLE_START_ADDRESS)					; Attempt to write X bytes to first free available UCM
>APDU: E5 (Write_X_Bytes_To_UCM) (wAddress) 08 -- FF FF FF FF FF FF FF FF	; space that already has the 01 02 03 ... pattern in it
>COMP: SW1SW2 = 6581