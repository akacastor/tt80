>ID:escrpt
>VER1
>LIST

;*******************************************************************************
; TT30_Write_X_Bytes_To_UCM__256_Page_Backup_Handled.escrpt
; =========================================================
;
; $Revision: 1.2 $
; $Author: chin $ 
; $Date: 2005/11/08 18:01:16 $
;
; TT30 Write X Bytes To UCM with automatic page backup and erasing test
; 1. Loads in TT30 memory defaults
; 2. Offers user selection of terminal to run the scripter at
; 3. Gets the ATR and compares it to the expected preset ATR value
; 4. Loads in APDU commands values
; 5. Ensure code space 3400h to 3600h is clear (FFh)
; 6. Use Write_X_Bytes_To_UCM to write 00 across code space space 3400h to 3600h
; 7. Write a pattern across the page boundaries (34F8h - 3508h)
; 8 .Read back memory space 3400h to 3600h, should have the pattern across page boundaries surrounded by all 00h's
; 9 .Read back memory space 7600h to 7800h (backup pages), should have the pattern across page boundaries surrounded by all 00h's
; 10. Write a pattern in the first page
; 11. Read back first page, pattern should of been written to page
; 12. Attempt to write a pattern to illegal memory space
;*******************************************************************************

$Include: ..\Support\TT30_Definitions.escrpt					; Load in the chip specific addresses

$Include: ..\Support\Select_Terminal.escrpt					; Select the terminal to run the scripter at

$Include: ..\Support\GetATR_and_Compare.escrpt					; Get ATR and compare it to known chip ATR response

$Include: ..\Support\Generic_Code_INS_Values.escrpt				; Load in the APDU command INS values

>SETVW: UCM_END_ADDRESS = (BOOTLOADER_START_ADDRESS)				; End address of UCM is where the bootloader starts

;******************************************************************************
; 5. Ensure code space 3400h to 3600h is clear (FFh)
;******************************************************************************
>DISPLAY0: Checking UCM bytes 3400h to 3600h are all FFh 

>APDU: E5 (XDATA_Space_Memory_Dump) 34 00 -- 80
>COMP: RAPDU = FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF
>COMP: SW1SW2 = 9000

>APDU: E5 (XDATA_Space_Memory_Dump) 35 00 -- 80
>COMP: RAPDU = FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF
>COMP: SW1SW2 = 9000

;******************************************************************************
; 6. Use Write_X_Bytes_To_UCM to write 00 across code space space 3400h to 3600h
;******************************************************************************
>DISPLAY0: Writing 00h across whole of UCM range 3400h to 3600h

>APDU: E5 (Write_X_Bytes_To_UCM) 34 00 80 -- 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>COMP: SW1SW2 = 9000
>APDU: E5 (Write_X_Bytes_To_UCM) 34 80 80 -- 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>COMP: SW1SW2 = 9000
>APDU: E5 (Write_X_Bytes_To_UCM) 35 00 80 -- 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>COMP: SW1SW2 = 9000
>APDU: E5 (Write_X_Bytes_To_UCM) 35 80 80 -- 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>COMP: SW1SW2 = 9000

;******************************************************************************
; 7. Write a pattern across the page boundaries (34F8h - 3508h)
;******************************************************************************
>DISPLAY0: Write 16 byte pattern across the page boundary 34F8h to 3508h

>APDU: E5 (Write_X_Bytes_To_UCM__256_Page_Backup_Handled) 34 F8 10 -- 11 22 33 44 55 66 77 88 99 AA BB CC DD EE FF 11
>COMP: SW1SW2 = 9000

;******************************************************************************
; 8 .Read back memory space 3400h to 3600h, should have the pattern across page boundaries surrounded by all 00h's
;******************************************************************************
>DISPLAY0: Read back memory area 3400h to 3600h checking patterns are in the correct places

>APDU: E5 (XDATA_Space_Memory_Dump) 34 00 -- 80
>COMP: RAPDU = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>COMP: SW1SW2 = 9000

>APDU: E5 (XDATA_Space_Memory_Dump) 34 80 -- 80
>COMP: RAPDU = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 11 22 33 44 55 66 77 88
>COMP: SW1SW2 = 9000

>APDU: E5 (XDATA_Space_Memory_Dump) 35 00 -- 80
>COMP: RAPDU = 99 AA BB CC DD EE FF 11 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>COMP: SW1SW2 = 9000

>APDU: E5 (XDATA_Space_Memory_Dump) 35 80 -- 80
>COMP: RAPDU = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>COMP: SW1SW2 = 9000

;******************************************************************************
; 9 .Read back memory space 7600h to 7800h (backup pages), should have the pattern across page boundaries surrounded by all 00h's
;******************************************************************************
>DISPLAY0: Read back memory area 7600h to 7800h checking patterns are in the correct places

>APDU: E5 (XDATA_Space_Memory_Dump) 76 00 -- 80
>COMP :RAPDU = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>COMP :SW1SW2 = 9000

>APDU: E5 (XDATA_Space_Memory_Dump) 76 80 -- 80
>COMP :RAPDU = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 11 22 33 44 55 66 77 88
>COMP :SW1SW2 = 9000

>APDU: E5 (XDATA_Space_Memory_Dump) 77 00 -- 80
>COMP :RAPDU = 99 AA BB CC DD EE FF 11 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>COMP :SW1SW2 = 9000

>APDU: E5 (XDATA_Space_Memory_Dump) 77 80 -- 80
>COMP :RAPDU = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>COMP :SW1SW2 = 9000

;******************************************************************************
; 10. Write a pattern in the first page
;******************************************************************************
>DISPLAY0: Write 8 byte pattern inside the page 3400h to 3500h

>APDU: E5 (Write_X_Bytes_To_UCM__256_Page_Backup_Handled) 34 10 08 -- 11 22 33 44 55 66 77 88
>COMP: SW1SW2 = 9000

;******************************************************************************
; 11. Read back first page, pattern should of been written to page
;******************************************************************************
>DISPLAY0: Read back the page memory 3400h to 3500h checking patterns are in the correct places

>APDU: E5 (XDATA_Space_Memory_Dump) 34 00 -- 80
>COMP: RAPDU = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 11 22 33 44 55 66 77 88 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>COMP: SW1SW2 = 9000

>APDU: E5 (XDATA_Space_Memory_Dump) 34 80 -- 80
>COMP: RAPDU = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 11 22 33 44 55 66 77 88
>COMP: SW1SW2 = 9000


;******************************************************************************
; 12. Attempt to write a pattern to illegal memory space
;******************************************************************************
>DISPLAY0: Attempting invalid parameters in the Write X Bytes To UCM 256 Page Backup Handled APDU command

>APDU: E5 (Write_X_Bytes_To_UCM__256_Page_Backup_Handled) 00 08 10 -- 11 22 33 44 55 66 77 88
>COMP: SW1SW2 = 6581

>APDU: E5 (Write_X_Bytes_To_UCM__256_Page_Backup_Handled) F0 00 10 -- 11 22 33 44 55 66 77 88
>COMP: SW1SW2 = 6581


>DISPLAY2: Test completed for Write X Bytes to UCM with page backup and erasing automatically handled

>ENDL