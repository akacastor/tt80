C51 COMPILER V7.50   ERASE_EE_8_BYTES                                                      12/29/2006 16:28:16 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE ERASE_EE_8_BYTES
OBJECT MODULE PLACED IN .\Erase_EE_8_Bytes.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\Common\Erase_EE_8_Bytes.c BROWSE INTVECTOR(0X8000) DEBUG OBJECTEXTEND PR
                    -INT(.\Erase_EE_8_Bytes.lst) OBJECT(.\Erase_EE_8_Bytes.obj)

line level    source

   1          /******************************************************************************
   2          *
   3          * Name:         Erase_EE_8_Bytes.c
   4          * Description:  Contains function to erase a 64 byte page of EEPROM
   5          * Copyright:    Emosyn Inc. 2005
   6          *
   7          * The Example Code herein below is provided "AS IS" and at your sole risk.  
   8          * As to this Code, EMOSYN expressly disclaims all warranties, including, but
   9          * not limited to the implied warranties of merchantability and fitness for a
  10          * particular purpose. EMOSYN does not warrant that the functions contained in
  11          * this code will meet your requirements, or that the operation of the code will
  12          * be accurate, error-free, or non-infringing. No oral or written information or
  13          * advice given by EMOSYN or an authorized representative shall create or affect
  14          * any Warranty.
  15          *******************************************************************************
  16          * $Revision: 1.2 $
  17          * $Author: amorris $ 
  18          * $Date: 2005/10/26 09:40:36 $
  19          ******************************************************************************/
  20          
  21          
  22          /******************************************************************************
  23          * Header file inclusions
  24          ******************************************************************************/
  25          #include "Firmware_API_JumpTable.h"
  26          #include "Emosyn_Helper_Functions.h"
  27          
  28          
  29          /******************************************************************************
  30          * External and local function declarations 
  31          ******************************************************************************/
  32          
  33          
  34          /******************************************************************************
  35          * External variable declarations
  36          ******************************************************************************/
  37          
  38          
  39          /******************************************************************************
  40          *
  41          * Function Name:      Erase_EE_8_Bytes
  42          * Function Inputs:    void
  43          * Function Outputs:   uint SW1SW2  9000h for success or 6581h for failure
  44          * Description:        Erases a 64 byte page of EEPROM
  45          *
  46          * APDU Syntax:        E5 04 PARA1 PARA2 00
  47          * APDU Inputs:        PARA1  High byte of EEPROM adddress page
  48          *                     PARA2  Low byte of EEPROM adddress page
  49          * APDU Outputs:       None
  50          *
  51          * Example usage:      Erase 8 byte EEPROM page at address 6000h
  52          * To Card             ->  E5 04 60 00 00
  53          * ACK from Card       <-  04
  54          * Response from Card  <-  90 00
C51 COMPILER V7.50   ERASE_EE_8_BYTES                                                      12/29/2006 16:28:16 PAGE 2   

  55          *
  56          ******************************************************************************/
  57          uint Erase_EE_8_Bytes (void)
  58          {
  59   1          /* Actual firmware API call */
  60   1          cRet_Val_Char = Firmware_EraseEE8Bytes (Conv_Two_Bytes_To_Int (PARA1, PARA2));
  61   1      
  62   1           /* Check the firmware call result */
  63   1          if (MSB_SET & cRet_Val_Char)
  64   1          {
  65   2              SW1SW2 = SW1SW2_MEMORY_ERROR;   /* If MSB of return value set it */
  66   2          }                                   /* indicates a memory operation error */
  67   1          else
  68   1          {
  69   2              SW1SW2 = SW1SW2_OK;         /* Firmware return value was 0 or the number */
  70   2          }                               /* of pulses required for memory operation */
  71   1      
  72   1          return SW1SW2;
  73   1      
  74   1      } /* End of function */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     42    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
