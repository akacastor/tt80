C51 COMPILER V7.50   SHA_1                                                                 12/29/2006 16:28:12 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE SHA_1
OBJECT MODULE PLACED IN .\SHA-1.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\Common\SHA-1.c BROWSE INTVECTOR(0X8000) DEBUG OBJECTEXTEND PRINT(.\SHA-1
                    -.lst) OBJECT(.\SHA-1.obj)

line level    source

   1          /******************************************************************************
   2          *
   3          * Name:         SHA-1.c
   4          * Description:  Contains function to perform SHA process
   5          * Copyright:    Emosyn Inc. 2005
   6          *
   7          * The Example Code herein below is provided "AS IS" and at your sole risk.  
   8          * As to this Code, EMOSYN expressly disclaims all warranties, including, but
   9          * not limited to the implied warranties of merchantability and fitness for a
  10          * particular purpose. EMOSYN does not warrant that the functions contained in
  11          * this code will meet your requirements, or that the operation of the code will
  12          * be accurate, error-free, or non-infringing. No oral or written information or
  13          * advice given by EMOSYN or an authorized representative shall create or affect
  14          * any Warranty.
  15          *******************************************************************************
  16          * $Revision: 1.3 $
  17          * $Author: chin $ 
  18          * $Date: 2005/11/09 12:58:25 $
  19          ******************************************************************************/
  20          
  21          
  22          /******************************************************************************
  23          * Header file inclusions
  24          ******************************************************************************/
  25          #include "Firmware_API_JumpTable.h"
  26          #include "Emosyn_Helper_Functions.h"
  27          
  28          #define S1(X) (((X)<<1) |((X)>>(32-1)))
  29          #define S5(X) (((X)<<5) |((X)>>(32-5)))
  30          #define S30(X) (((X)<<30)|((X)>>(32-30)))
  31          
  32          
  33          /******************************************************************************
  34          * External and local function declarations 
  35          ******************************************************************************/
  36          ulong *SHA_1_Hash (uchar *ucpDataBytesPtr, uint uiNumberToHash);
  37          
  38          
  39          /******************************************************************************
  40          * External variable declarations
  41          ******************************************************************************/
  42          
  43          
  44          /******************************************************************************
  45          *
  46          * Function Name:      Call_SHA1
  47          * Function Inputs:    void
  48          * Function Outputs:   uint SW1SW2  9000h for success or
  49          *                                  6C00h for wrong LE
  50          * Description:        
  51          *
  52          * APDU Syntax:        E5 78 PARA1 PARA2 14
  53          * APDU Inputs:        PARA1  Byte to hash
  54          *                     PARA2  Number of times to hash PARA1
C51 COMPILER V7.50   SHA_1                                                                 12/29/2006 16:28:12 PAGE 2   

  55          * APDU Outputs:       20 bytes of SHA hashed data
  56          *
  57          * Example usage:      SHA 1 hash 80h bytes of FFh
  58          * To Card             ->  E5 78 FF 80 14
  59          * ACK from Card       <-  78
  60          * Data from Card      ->  CD 5B D2 0E 9A 0F 22 D7 36 7C C1 69 E2 84 4A 02 75 1C 7C 91
  61          * Response from Card  <-  90 00
  62          *
  63          ******************************************************************************/
  64          uint Call_SHA1 (void)
  65          {
  66   1          uchar *ucpSHA1_Hash_Output;
  67   1      
  68   1          if (PARA3 == 0x14)
  69   1          {
  70   2              /* Setup Pointer to point at XRAM start address */
  71   2              uchar xdata *ucPtr_Data_To_Hash = XDATA_START_ADDRESS;
  72   2      
  73   2              /* Write PARA2 bytes of PARA1 into XRAM starting XRAM start address */
  74   2              for (ucCount = 0; ucCount < PARA2; ucCount++)
  75   2              {
  76   3                  *ucPtr_Data_To_Hash++ = PARA1;
  77   3              }
  78   2      
  79   2              ucPtr_Data_To_Hash = XDATA_START_ADDRESS; /* Reset Pointer */
  80   2      
  81   2              /* Call the SHA1 function */
  82   2              ucpSHA1_Hash_Output = (uchar *)SHA_1_Hash (ucPtr_Data_To_Hash, PARA2);
  83   2      
  84   2              for (ucCount = 0; ucCount < 20; ucCount++)  /* Output the Hash value */
  85   2              {
  86   3                  PutChar (*(ucpSHA1_Hash_Output++));
  87   3              }
  88   2      
  89   2              SW1SW2 = SW1SW2_OK;
  90   2          }
  91   1          else
  92   1          {
  93   2              SW1SW2 = SW1SW2_WRONG_LE_LENGTH;
  94   2          }
  95   1      
  96   1          return SW1SW2;
  97   1      
  98   1      } /* End of function */
  99          
 100          
 101          /******************************************************************************
 102          *
 103          * Function Name:      SHA_1_Hash
 104          * Function Inputs:    uchar *ucpDataBytesPtr  Pointer to data to hash
 105          *                     uint  uiNumberToHash    Number of bytes ot hash
 106          * Function Outputs:   ulong H                 Array of 5 long data variables
 107          * Description:        Contains the actual SHA algorithm to hash the data
 108          *
 109          *******************************************************************************/
 110          ulong *SHA_1_Hash (uchar *ucpDataBytesPtr, uint uiNumberToHash)
 111          {       
 112   1          ulong H[5] ;
 113   1          ulong A, B, C, D, E;
 114   1          ulong idata W[16];
 115   1          ulong ulTEMP;
 116   1          uint uiBytesAlreadyHashed;
C51 COMPILER V7.50   SHA_1                                                                 12/29/2006 16:28:12 PAGE 3   

 117   1          uchar s;
 118   1          uchar t;
 119   1          uchar ucPaddingDone = 0;
 120   1              
 121   1          /*********************************************************************/
 122   1          /* Before processing any blocks, the {H[i]} are initialized as       */
 123   1          /* follows: in hex,                                                  */
 124   1          /* H[0] = 67452301                                                   */
 125   1          /* H[1] = EFCDAB89                                                   */
 126   1          /* H[2] = 98BADCFE                                                   */
 127   1          /* H[3] = 10325476                                                   */
 128   1          /* H[4] = C3D2E1F0.                                                  */
 129   1          /*********************************************************************/
 130   1              
 131   1          H[0] = 0x67452301;
 132   1          H[1] = 0xEFCDAB89;
 133   1          H[2] = 0x98BADCFE;
 134   1          H[3] = 0x10325476;
 135   1          H[4] = 0xC3D2E1F0;
 136   1      
 137   1          /*********************************************************************/
 138   1          /* Now M[1], M[2], ... , M[n] are processed.                         */
 139   1          /*********************************************************************/
 140   1      
 141   1          uiBytesAlreadyHashed = 0 ;
 142   1              
 143   1          /* now if we were to call this function...then the pointer to the data would be passed
 144   1           as well as the length */
 145   1      
 146   1          while (uiBytesAlreadyHashed <= uiNumberToHash || ucPaddingDone != 3)
 147   1          {
 148   2              for (t = 0; t<16; t++)
 149   2              {
 150   3                  W[t]= 0;
 151   3              }
 152   2      
 153   2              t = 0;
 154   2      
 155   2              if (uiBytesAlreadyHashed < uiNumberToHash)
 156   2              {
 157   3                  do
 158   3                  {
 159   4                      W[t / 4] =  W[t / 4] | ((ulong)*ucpDataBytesPtr << ( (3 -(t % 4)) * 8));
 160   4                      ucpDataBytesPtr++;
 161   4                      t++; 
 162   4                  } while ((t % 0x40 !=0) && (t + uiBytesAlreadyHashed < uiNumberToHash));
 163   3              }
 164   2                      
 165   2              if ((int)(uiNumberToHash - uiBytesAlreadyHashed) < 64)
 166   2              {
 167   3                  t = 0;
 168   3      
 169   3                  /* WE ENTER IN THE LAST BLOCK. /* MAKE THE PADDING */
 170   3                      
 171   3                  if (ucPaddingDone == 0)
 172   3                  {
 173   4                      s = (uiNumberToHash & 0x3F);
 174   4                      /* ulTEMP indicates the bytes numbers in the last word. 0 <= ulTEMP < 4 */
 175   4                      ulTEMP = s % 4;   
 176   4                      /* t is used as a temporary variable, it indicates the number of "completly" filled words.
             - */ 
 177   4                                      t = s / 4;
C51 COMPILER V7.50   SHA_1                                                                 12/29/2006 16:28:12 PAGE 4   

 178   4      
 179   4                      if (ulTEMP == 0)
 180   4                      {
 181   5                          /* write 0x80 after the last byte of data & ensure the following bytes are reset */
 182   5                          W[t] = 0x80000000;
 183   5                      }
 184   4                      else
 185   4                      {
 186   5                          if (ulTEMP < 2)
 187   5                          {
 188   6                              /* write 0x80 after the last byte of data & ensure the following bytes are reset *
             -/
 189   6                              W[t] |= 0x800000;
 190   6                          }
 191   5                          else
 192   5                          {
 193   6                              if (ulTEMP < 3)
 194   6                              {
 195   7                                  /* write 0x80 after the last byte of data & ensure the following bytes are res
             -et */
 196   7                                  W[t] |= 0x8000;
 197   7                              }
 198   6                              else
 199   6                              {
 200   7                                  /* write 0x80 after the last byte of data & ensure the following bytes are res
             -et */
 201   7                                  W[t] |= 0x80;
 202   7                              }
 203   6                          }
 204   5                      }
 205   4      
 206   4                      ucPaddingDone = 1;
 207   4                  }
 208   3      
 209   3                  if (t < 14 && !(ucPaddingDone & 0x02))
 210   3                  {
 211   4                      W[15] = uiNumberToHash * 8;
 212   4      
 213   4                      /* uiBytesAlreadyHashed is set to this value to exit the while loop */
 214   4                      uiBytesAlreadyHashed = uiNumberToHash;
 215   4                      ucPaddingDone|=2;
 216   4                  }
 217   3              }
 218   2      
 219   2              /*********************************************************************/
 220   2              /* message block processing                                          */
 221   2              /*********************************************************************/
 222   2      
 223   2              /*********************************************************************/
 224   2              /* c. Let A = H[0], B = H[1], C = H[2], D = H[3], E = H[4].          */
 225   2              /*********************************************************************/
 226   2      
 227   2              A = H[0]; B = H[1]; C = H[2]; D = H[3]; E = H[4];
 228   2      
 229   2              for (t = 0; t < 80 ; t++)
 230   2              {
 231   3                  s = t & 0x0f;
 232   3                  ulTEMP = W[(ulong)((s + 13) & 0x0f)] ^ W[(ulong)((s + 8) & 0x0f)] ^ W[(ulong)((s + 2) & 0x0f)]
             - ^ W[s];
 233   3      
 234   3                  if (t > 15) 
 235   3                  {
C51 COMPILER V7.50   SHA_1                                                                 12/29/2006 16:28:12 PAGE 5   

 236   4                      W[s] = S1(ulTEMP);
 237   4                  }
 238   3                  if (t < 20)
 239   3                  {
 240   4                      ulTEMP = ((B & C)|((~B) & D)) + 0x5A827999;
 241   4                  }
 242   3                  else
 243   3                  {
 244   4                      if (t < 40)
 245   4                      {
 246   5                          ulTEMP = (B ^ C ^ D) + 0x6ED9EBA1;
 247   5                      }
 248   4                      else
 249   4                      {
 250   5                          if (t < 60)
 251   5                          {
 252   6                              ulTEMP = ((B & C) | (B & D) | (C & D)) + 0x8F1BBCDC;
 253   6                          }
 254   5                              else
 255   5                          {
 256   6                              ulTEMP = (B ^ C ^ D) + 0xCA62C1D6;
 257   6                          }
 258   5                      }
 259   4                  }
 260   3      
 261   3                  ulTEMP = ulTEMP + S5(A) + E + W[s];
 262   3      
 263   3                  E = D;
 264   3                  D = C;
 265   3                  C = S30(B);
 266   3                  B = A;
 267   3                  A = ulTEMP;
 268   3      
 269   3              } /* end of for loop */
 270   2              /*********************************************************************/
 271   2              /* e.g Let H[0] = H[0] + A, H[1] = H[1] + B, H[2]= H[2] + C,          */
 272   2              /*  H[3] = H[3] + D, H[4] = H[4] + E.                                */
 273   2              /*********************************************************************/
 274   2      
 275   2              H[0] = H[0] + A;
 276   2              H[1] = H[1] + B;
 277   2              H[2] = H[2] + C;
 278   2              H[3] = H[3] + D;
 279   2              H[4] = H[4] + E;
 280   2      
 281   2              uiBytesAlreadyHashed += 64;
 282   2      
 283   2          } /* end of while loop */
 284   1      
 285   1          /*********************************************************************/
 286   1          /* After processing M[n], the message digest is the 160-bit string   */
 287   1          /* represented by the 5 words                                        */
 288   1          /* H[0] H[1] H[2] H[3] H[4].                                         */
 289   1          /*********************************************************************/
 290   1      
 291   1          return H;
 292   1      
 293   1      } /* End of function */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1589    ----
C51 COMPILER V7.50   SHA_1                                                                 12/29/2006 16:28:12 PAGE 6   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      59
   IDATA SIZE       =   ----      64
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
