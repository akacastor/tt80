C51 COMPILER V7.50   SET_SECURITY_MASK                                                     12/29/2006 16:28:15 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE SET_SECURITY_MASK
OBJECT MODULE PLACED IN .\Set_Security_Mask.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\Common\Set_Security_Mask.c BROWSE INTVECTOR(0X8000) DEBUG OBJECTEXTEND P
                    -RINT(.\Set_Security_Mask.lst) OBJECT(.\Set_Security_Mask.obj)

line level    source

   1          /******************************************************************************
   2          *
   3          * Name:         Set_Security_Mask.c
   4          * Description:  Contains function to set the security faults to act upon
   5          * Copyright:    Emosyn Inc. 2005
   6          *
   7          * The Example Code herein below is provided "AS IS" and at your sole risk.  
   8          * As to this Code, EMOSYN expressly disclaims all warranties, including, but
   9          * not limited to the implied warranties of merchantability and fitness for a
  10          * particular purpose. EMOSYN does not warrant that the functions contained in
  11          * this code will meet your requirements, or that the operation of the code will
  12          * be accurate, error-free, or non-infringing. No oral or written information or
  13          * advice given by EMOSYN or an authorized representative shall create or affect
  14          * any Warranty.
  15          *******************************************************************************
  16          * $Revision: 1.1 $
  17          * $Author: chin $ 
  18          * $Date: 2005/08/09 11:53:42 $
  19          ******************************************************************************/
  20          
  21          
  22          /******************************************************************************
  23          * Header file inclusions
  24          ******************************************************************************/
  25          #include "Firmware_API_JumpTable.h"
  26          #include "Emosyn_Helper_Functions.h"
  27          
  28          
  29          /******************************************************************************
  30          * External and local function declarations 
  31          ******************************************************************************/
  32          
  33          
  34          /******************************************************************************
  35          * External variable declarations
  36          ******************************************************************************/
  37          
  38          
  39          /******************************************************************************
  40          *
  41          * Function Name:      Set_Security_Mask
  42          * Function Inputs:    void
  43          * Function Outputs:   uint SW1SW2  9000h for success or 6581h for failure
  44          * Description:        Sets the security mask so the chip can allow or ignore
  45          *                     security fault events. See Device Reference guide for
  46          *                     details of Security Masks
  47          *
  48          * APDU Syntax:        E5 16 PARA1 PARA2 00
  49          * APDU Inputs:        PARA1  Security faults cause a chip reset
  50          *                     PARA2  Temporary (0) or Persistent (1) setting
  51          * APDU Outputs:       None
  52          *
  53          * Example usage:      Only allow memory security fault, mask out all others permanently
  54          * To Card             ->  E5 16 20 01 00
C51 COMPILER V7.50   SET_SECURITY_MASK                                                     12/29/2006 16:28:15 PAGE 2   

  55          * ACK from Card       <-  16
  56          * Response from Card  <-  90 00
  57          *
  58          ******************************************************************************/
  59          uint Set_Security_Mask (void)
  60          {
  61   1          /* Actual firmware API call */
  62   1          cRet_Val_Char = Firmware_SetSecurityMask (PARA1, PARA2);
  63   1      
  64   1          /* Check the firmware call result */
  65   1          if (MSB_SET & cRet_Val_Char)
  66   1          {
  67   2              SW1SW2 = SW1SW2_MEMORY_ERROR;   /* If MSB of return value set it */
  68   2          }                                   /* indicates a memory operation error */
  69   1          else
  70   1          {
  71   2              SW1SW2 = SW1SW2_OK;         /* Firmware return value was 0 or the number */
  72   2          }                               /* of pulses required for memory operation */
  73   1      
  74   1          return SW1SW2;
  75   1      
  76   1      } /* End of function */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     39    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
