C51 COMPILER V7.50   ERASE_256_UCM_EXTENDED_ADDRESSING                                     12/12/2006 14:05:44 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE ERASE_256_UCM_EXTENDED_ADDRESSING
OBJECT MODULE PLACED IN .\Erase_256_UCM_Extended_Addressing.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\Common\Erase_256_UCM_Extended_Addressing.c OMF2 ROM(D512K) OPTIMIZE(SIZE
                    -) BROWSE INTVECTOR(0X0800) DEFINE(EXTENDED_ADDRESSING) VARBANKING DEBUG PRINT(.\Erase_256_UCM_Extended_Addressing.lst) O
                    -BJECT(.\Erase_256_UCM_Extended_Addressing.obj)

line level    source

   1          /******************************************************************************
   2          *
   3          * Name:         Erase_256_UCM_Extended_Addressing.c
   4          * Description:  Contains function to erase a 256 byte UCM page
   5          *               This function allows pagee erases over the normal 64k boundary
   6          * Copyright:    Emosyn Inc. 2006
   7          *
   8          * The Example Code herein below is provided "AS IS" and at your sole risk.  
   9          * As to this Code, EMOSYN expressly disclaims all warranties, including, but
  10          * not limited to the implied warranties of merchantability and fitness for a
  11          * particular purpose. EMOSYN does not warrant that the functions contained in
  12          * this code will meet your requirements, or that the operation of the code will
  13          * be accurate, error-free, or non-infringing. No oral or written information or
  14          * advice given by EMOSYN or an authorized representative shall create or affect
  15          * any Warranty.
  16          *******************************************************************************
  17          * $Revision: 1.1 $
  18          * $Author: chin $ 
  19          * $Date: 2006/03/08 16:22:21 $
  20          ******************************************************************************/
  21          
  22          
  23          /******************************************************************************
  24          * Header file inclusions
  25          ******************************************************************************/
  26          #include "Firmware_API_JumpTable.h"
  27          #include "Emosyn_Helper_Functions.h"
  28          
  29          
  30          /******************************************************************************
  31          * External and local function declarations 
  32          ******************************************************************************/
  33          
  34          
  35          /******************************************************************************
  36          * External variable declarations
  37          ******************************************************************************/
  38          
  39          
  40          /******************************************************************************
  41          *
  42          * Function Name:      Erase_256_UCM_Extended_Addressing
  43          * Function Inputs:    void 
  44          * Function Outputs:   uint SW1SW2  9000h for success or
  45          *                                  6581h for memory failure or
  46          *                                  6700h for wrong LC
  47          * Description:        Erases a 256 byte UCM page
  48          *
  49          * APDU Syntax:        E5 AE 00 00 03
  50          * APDU Inputs:        DataByte1  DPX address byte
  51          *                     DataByte2  DPH address byte
  52          *                     DataByte3  DPL address byte
  53          * APDU Outputs:       None
C51 COMPILER V7.50   ERASE_256_UCM_EXTENDED_ADDRESSING                                     12/12/2006 14:05:44 PAGE 2   

  54          *
  55          * Example usage:      Erase the 256 byte UCM page starting at address 010200h
  56          * To Card             ->  E5 AE 00 00 03
  57          * ACK from Card       <-  AE
  58          * Data to Card        ->  01 02 00
  59          * Response from Card  <-  90 00
  60          *
  61          ******************************************************************************/
  62          uint Erase_256_UCM_Extended_Addressing (void)
  63          {
  64   1          if (PARA3 == 0x03)
  65   1          {
  66   2              /* Get 3 byte address */
  67   2              /* Need to pass pointer to first byte of far pointer */
  68   2              Serial_Receive_X_Bytes (0x03, (unsigned char idata*)&uc_Fptr);
  69   2      
  70   2              /* Actual firmware API call */
  71   2              cRet_Val_Char = Firmware_EraseUCM256Bytes (uc_Fptr);
  72   2      
  73   2              /* Check the firmware call result */
  74   2              if (MSB_SET & cRet_Val_Char)
  75   2              {
  76   3                  SW1SW2 = SW1SW2_MEMORY_ERROR;   /* If MSB of return value set it */
  77   3              }                                   /* indicates a memory operation error */
  78   2              else
  79   2              {
  80   3                  SW1SW2 = SW1SW2_OK;         /* Firmware return value was 0 or the number */
  81   3              }                               /* of pulses required for memory operation */
  82   2          }
  83   1      
  84   1          else
  85   1          {
  86   2              SW1SW2 = SW1SW2_WRONG_LC_LENGTH;    /* Wrong amount of input bytes */
  87   2          }
  88   1      
  89   1          return SW1SW2;
  90   1      
  91   1      } /* End of function */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     58    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
