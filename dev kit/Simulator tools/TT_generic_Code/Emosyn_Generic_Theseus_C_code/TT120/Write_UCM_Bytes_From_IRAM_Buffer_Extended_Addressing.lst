C51 COMPILER V7.50   WRITE_UCM_BYTES_FROM_IRAM_BUFFER_EXTENDED                             12/12/2006 14:05:40 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE WRITE_UCM_BYTES_FROM_IRAM_BUFFER_EXTENDED
OBJECT MODULE PLACED IN .\Write_UCM_Bytes_From_IRAM_Buffer_Extended_Addressing.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\Common\Write_UCM_Bytes_From_IRAM_Buffer_Extended_Addressing.c OMF2 ROM(D
                    -512K) OPTIMIZE(SIZE) BROWSE INTVECTOR(0X0800) DEFINE(EXTENDED_ADDRESSING) VARBANKING DEBUG PRINT(.\Write_UCM_Bytes_From_
                    -IRAM_Buffer_Extended_Addressing.lst) OBJECT(.\Write_UCM_Bytes_From_IRAM_Buffer_Extended_Addressing.obj)

line level    source

   1          /******************************************************************************
   2          *
   3          * Name:         Write_UCM_Bytes_From_IRAM_Buffer_Extended_Addressing.c
   4          * Description:  Contains function to write to UCM using data held in IDATA
   5          * Copyright:    Emosyn Inc. 2006
   6          *
   7          * The Example Code herein below is provided "AS IS" and at your sole risk.  
   8          * As to this Code, EMOSYN expressly disclaims all warranties, including, but
   9          * not limited to the implied warranties of merchantability and fitness for a
  10          * particular purpose. EMOSYN does not warrant that the functions contained in
  11          * this code will meet your requirements, or that the operation of the code will
  12          * be accurate, error-free, or non-infringing. No oral or written information or
  13          * advice given by EMOSYN or an authorized representative shall create or affect
  14          * any Warranty.
  15          *******************************************************************************
  16          * $Revision: 1.1 $
  17          * $Author: chin $ 
  18          * $Date: 2006/03/08 16:21:59 $
  19          ******************************************************************************/
  20          
  21          
  22          /******************************************************************************
  23          * Header file inclusions
  24          ******************************************************************************/
  25          #include "Firmware_API_JumpTable.h"
  26          #include "Emosyn_Helper_Functions.h"
  27          
  28          
  29          /******************************************************************************
  30          * External and local function declarations 
  31          ******************************************************************************/
  32          
  33          
  34          /******************************************************************************
  35          * External variable declarations
  36          ******************************************************************************/
  37          
  38          
  39          /******************************************************************************
  40          *
  41          * Function Name:      Write_UCM_Bytes_From_IRAM_Buffer_Extended_Addressing
  42          * Function Inputs:    void
  43          * Function Outputs:   uint SW1SW2  9000h for success or
  44          *                                  6581h for memory failure or
  45          *                                  6700h for wrong LC
  46          * Description:        Writes bytes from IDATA memory to UCM
  47          *
  48          * APDU Syntax:        E5 D8 00 00 05
  49          * APDU Inputs:        DataByte1  IDATA source address of the Data to write
  50          *                     DataByte2  Number of bytes to write
  51          *                     DataByte3  DPX address
  52          *                     DataByte4  DPH address
  53          *                     DataByte5  DPL address
C51 COMPILER V7.50   WRITE_UCM_BYTES_FROM_IRAM_BUFFER_EXTENDED                             12/12/2006 14:05:40 PAGE 2   

  54          * APDU Outputs:       None
  55          *
  56          * Example usage:      Write 20h bytes to UCM (starting at 010203h)
  57          *                     from IDATA starting at 40h
  58          * To Card             ->  E5 D8 00 00 05
  59          * ACK from Card       <-  D8
  60          * Data to Card        ->  40 20 01 02 03
  61          * Response from Card  <-  90 00
  62          *
  63          ******************************************************************************/
  64          uint Write_UCM_Bytes_From_IRAM_Buffer_Extended_Addressing (void)
  65          {
  66   1          if (PARA3 == 0x05)
  67   1          {
  68   2              /* Get the address of Idata source and number of bytes to copy) */
  69   2              Serial_Receive_X_Bytes (0x02, &TEMPVARIABLE1);
  70   2      
  71   2              /* Get 3 byte address */
  72   2              /* Need to pass pointer to first byte of far pointer */
  73   2              Serial_Receive_X_Bytes (0x03, (unsigned char idata*)&uc_Fptr);
  74   2      
  75   2              /* Actual firmware API call */
  76   2              cRet_Val_Char = Firmware_WriteUCM (TEMPVARIABLE1, TEMPVARIABLE2, uc_Fptr);
  77   2      
  78   2              if (MSB_SET & cRet_Val_Char) 
  79   2              {
  80   3                  SW1SW2 = SW1SW2_MEMORY_ERROR;    /* If MSB of return value is set it */
  81   3              }                                   /* indicates a memory error */
  82   2              else
  83   2              {
  84   3                  SW1SW2 = SW1SW2_OK;         /* Firmware return value was 0 or the number */
  85   3              }                               /* of pulses required for memory operation */
  86   2          }
  87   1      
  88   1          else
  89   1          {
  90   2              SW1SW2 = SW1SW2_WRONG_LC_LENGTH;    /* Wrong amount of input bytes */
  91   2          }
  92   1      
  93   1          return SW1SW2;
  94   1      
  95   1      } /* End of function */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     72    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
