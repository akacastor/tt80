C51 COMPILER V8.05a   IO                                                                   01/25/2007 14:37:12 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE IO
OBJECT MODULE PLACED IN .\IO.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\Common\IO.c OMF2 OPTIMIZE(SIZE) BROWSE INTVECTOR(0X0400) MODDP2 DEBUG PR
                    -INT(.\IO.lst) OBJECT(.\IO.obj)

line level    source

   1          /******************************************************************************
   2          *
   3          * Name:         IO.c
   4          * Description:  Contains functions for the input and output serial routines
   5          * Copyright:    Emosyn Inc. 2005
   6          *
   7          * The Example Code herein below is provided "AS IS" and at your sole risk.  
   8          * As to this Code, EMOSYN expressly disclaims all warranties, including, but
   9          * not limited to the implied warranties of merchantability and fitness for a
  10          * particular purpose. EMOSYN does not warrant that the functions contained in
  11          * this code will meet your requirements, or that the operation of the code will
  12          * be accurate, error-free, or non-infringing. No oral or written information or
  13          * advice given by EMOSYN or an authorized representative shall create or affect
  14          * any Warranty.
  15          *******************************************************************************
  16          * $Revision: 1.3 $
  17          * $Author: chin $ 
  18          * $Date: 2006/02/22 15:46:04 $
  19          ******************************************************************************/
  20          
  21          
  22          /******************************************************************************
  23          * Header file inclusions
  24          ******************************************************************************/
  25          #include "Firmware_API_JumpTable.h"
  26          #include "Emosyn_Helper_Functions.h"
  27          
  28          
  29          /******************************************************************************
  30          * External and local function declarations 
  31          ******************************************************************************/
  32          
  33          
  34          /******************************************************************************
  35          * External variable declarations
  36          ******************************************************************************/
  37          
  38          
  39          /******************************************************************************
  40          *
  41          * Function Name:      PutChar
  42          * Function Inputs:    uchar  ByteToTx
  43          * Function Outputs:   void
  44          * Description:        Outputs a single char through the serial port
  45          *                         Loads the char to send into the SBUF sfr
  46          *                         waits until TI flag has been set to indicate char sent
  47          *                         checks the resend bit to see if there was an error
  48          *                             if resend bit is 0 the function exits
  49          *                             if resend bit is 1 redo the transmit loop
  50          *
  51          ******************************************************************************/
  52          void PutChar (uchar ByteToTx)
  53          {
  54   1          while (1)
C51 COMPILER V8.05a   IO                                                                   01/25/2007 14:37:12 PAGE 2   

  55   1          {
  56   2              SBUF = ByteToTx;        /* Put char to send into the Serial buffer */
  57   2      
  58   2              while (TI == 0);        /* Wait until TI has gone high */
  59   2      
  60   2              TI = 0;                 /* Reset the TI flag */
  61   2      
  62   2              if (!(ISOCON & 0x08))   /* If bit 3 (Resend) is 0 transmit successful */
  63   2                      {
  64   3                  break;              /* break out of this loop */
  65   3                      }
  66   2      
  67   2              ISOCON &= 0xF7;         /* Reset resend bit & try to outputting again */
  68   2          }
  69   1      
  70   1      } /* End of function */
  71          
  72          
  73          /******************************************************************************
  74          *
  75          * Function Name:      GetChar
  76          * Function Inputs:    void
  77          * Function Outputs:   char  byte from SBUF
  78          * Description:        Gets a char from the serial port
  79          *                         Code waits for RI flag to be set indicating char received
  80          *                         clears the RI flag
  81          *                         returns the byte received
  82          *
  83          ******************************************************************************/
  84          uchar GetChar (void)
  85          {
  86   1          while (RI == 0x00);     /* Wait until RI flag is set to indicated char received */
  87   1      
  88   1          RI = 0x00;              /* Reset the receive flag */
  89   1      
  90   1          return SBUF;            /* Return the char back to the calling function */
  91   1      
  92   1      } /* End of function */
  93          
  94          
  95          /******************************************************************************
  96          *
  97          * Function Name:      Serial_Receive_X_Bytes
  98          * Function Inputs:    uchar Num_of_Bytes_To_RX  Number of bytes to receive
  99          *                     uchar *Buffer_to_Fill     Pointer to buffer to fill
 100          * Function Outputs:   void
 101          * Description:        Routine to receive multiple bytes from serial port
 102          *
 103          ******************************************************************************/
 104          void Serial_Receive_X_Bytes (uchar Num_of_Bytes_To_RX, uchar idata *Buffer_to_Fill)
 105          {
 106   1          while (Num_of_Bytes_To_RX > 0)      /* Only stop when there are no more bytes to get */
 107   1          {
 108   2              *Buffer_to_Fill = GetChar();    /* Get a single char and place it in the buffer */
 109   2      
 110   2              Buffer_to_Fill++;               /* Point to next element in buffer */
 111   2      
 112   2              Num_of_Bytes_To_RX--;           /* Decrement the number of bytes to receive */
 113   2          }
 114   1      
 115   1      } /* End of function */
 116          
C51 COMPILER V8.05a   IO                                                                   01/25/2007 14:37:12 PAGE 3   

 117          
 118          /******************************************************************************
 119          *
 120          * Function Name:      Serial_Transmit_X_Bytes
 121          * Function Inputs:    uchar  Num_of_Bytes_To_TX  Number of bytes to transmit
 122          *                     uchar  *Buffer_to_Send     Pointer to buffer with bytes to send
 123          * Function Outputs:   void
 124          * Description:        Routine to transmit multiple bytes to the serial port
 125          *
 126          ******************************************************************************/
 127          void Serial_Transmit_X_Bytes (uchar Num_of_Bytes_To_TX, uchar idata *Buffer_to_Send)
 128          {
 129   1          while (Num_of_Bytes_To_TX > 0)      /* Only stop when there are no more bytes to get */
 130   1          {
 131   2              PutChar (*Buffer_to_Send);      /* Send a single char from the buffer */
 132   2      
 133   2              Buffer_to_Send++;               /* Point to next element in buffer to send */
 134   2      
 135   2              Num_of_Bytes_To_TX--;           /* Decrement the number of bytes to transmit */
 136   2          }
 137   1      
 138   1      } /* End of function */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     66    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
