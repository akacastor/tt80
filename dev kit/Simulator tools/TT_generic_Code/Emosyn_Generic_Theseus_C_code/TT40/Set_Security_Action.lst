C51 COMPILER V8.05a   SET_SECURITY_ACTION                                                  01/25/2007 14:37:16 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE SET_SECURITY_ACTION
OBJECT MODULE PLACED IN .\Set_Security_Action.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\Common\Set_Security_Action.c OMF2 OPTIMIZE(SIZE) BROWSE INTVECTOR(0X0400
                    -) MODDP2 DEBUG PRINT(.\Set_Security_Action.lst) OBJECT(.\Set_Security_Action.obj)

line level    source

   1          /******************************************************************************
   2          *
   3          * Name:         Set_Security_Action.c
   4          * Description:  Contains function to change the way the chip reacts to security
   5          *               faults that occur
   6          * Copyright:    Emosyn Inc. 2005
   7          *
   8          * The Example Code herein below is provided "AS IS" and at your sole risk.  
   9          * As to this Code, EMOSYN expressly disclaims all warranties, including, but
  10          * not limited to the implied warranties of merchantability and fitness for a
  11          * particular purpose. EMOSYN does not warrant that the functions contained in
  12          * this code will meet your requirements, or that the operation of the code will
  13          * be accurate, error-free, or non-infringing. No oral or written information or
  14          * advice given by EMOSYN or an authorized representative shall create or affect
  15          * any Warranty.
  16          *******************************************************************************
  17          * $Revision: 1.1 $
  18          * $Author: chin $ 
  19          * $Date: 2005/08/09 11:53:42 $
  20          ******************************************************************************/
  21          
  22          
  23          /******************************************************************************
  24          * Header file inclusions
  25          ******************************************************************************/
  26          #include "Firmware_API_JumpTable.h"
  27          #include "Emosyn_Helper_Functions.h"
  28          
  29          
  30          /******************************************************************************
  31          * External and local function declarations 
  32          ******************************************************************************/
  33          
  34          
  35          /******************************************************************************
  36          * External variable declarations
  37          ******************************************************************************/
  38          
  39          
  40          /******************************************************************************
  41          *
  42          * Function Name:      Set_Security_Action
  43          * Function Inputs:    void
  44          * Function Outputs:   uint SW1SW2  9000h for success or 6581h for failure
  45          * Description:        Sets the action the chip should follow (chip reset
  46          *                     or cause interrupt) on security fault detection
  47          *
  48          * APDU Syntax:        E5 14 PARA1 PARA2 00
  49          * APDU Inputs:        PARA1  0x00  Security faults cause a chip reset
  50          *                            0x40  Security faults cause a chip interrupt
  51          *                     PARA2  Temporary (0) or Persistent (1) setting
  52          * APDU Outputs:       None
  53          * Example usage:      Make security faults cause interrupts permanently
  54          * To Card             ->  E5 14 40 01 00
C51 COMPILER V8.05a   SET_SECURITY_ACTION                                                  01/25/2007 14:37:16 PAGE 2   

  55          * ACK from Card       <-  14
  56          * Response from Card  <-  90 00
  57          *
  58          ******************************************************************************/
  59          uint Set_Security_Action (void)
  60          {
  61   1          /* Actual firmware API call */
  62   1          cRet_Val_Char = Firmware_SetSecurityAction (PARA1, PARA2);
  63   1      
  64   1          /* Check the firmware call result */
  65   1          if (MSB_SET & cRet_Val_Char)
  66   1          {
  67   2              SW1SW2 = SW1SW2_MEMORY_ERROR;   /* If MSB of return value set it */
  68   2          }                                   /* indicates a memory operation error */
  69   1          else
  70   1          {
  71   2              SW1SW2 = SW1SW2_OK;         /* Firmware return value was 0 or the number */
  72   2          }                               /* of pulses required for memory operation */
  73   1      
  74   1          return SW1SW2;
  75   1      
  76   1      } /* End of function */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     39    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
