AX51 MACRO ASSEMBLER  TT40_STARTUP                                                          01/25/07 14:37:10 PAGE     1


MACRO ASSEMBLER AX51 V3.01a
OBJECT MODULE PLACED IN TT40_STARTUP.OBJ
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\AX51.EXE TT40_STARTUP.A51 SET(SMALL) DEBUG EP

LOC    OBJ             LINE     SOURCE

                          1     ;***************************************************************************************
                               *****************
                          2     ;
                          3     ; Name:         TT40_Startup.A51
                          4     ; Description:  Modified startup code based on Keil's Startup.a51
                          5     ; Copyright:    SST 2006
                          6     ; 
                          7     ;***************************************************************************************
                               *****************
                          8     ; The Example Code hereinbelow is provided "AS IS" and at your sole risk.  
                          9     ; As to this Code, EMOSYN expressly disclaims all Warranties, including, but not limited
                                to the implied 
                         10     ; warranties of merchantability and fitness for a particular purpose. EMOSYN does not wa
                               rrant that the 
                         11     ; functions contained in this code will meet your requirements, or that the operation of
                                the code will 
                         12     ; be accurate, error-free, or non-infringing.  No oral or written information or advice 
                               given by EMOSYN 
                         13     ; or an authorized representative shall create or affect any Warranty.
                         14     ;***************************************************************************************
                               *****************
                         15     ; $Revision: 1.1 $
                         16     ; $Author: dhunter $ 
                         17     ; $Date: 2006/10/10 22:40:18 $
                         18     ;***************************************************************************************
                               *****************
                         19     
                         20     ;
                         21     ;------------------------------------------------------------------------------
                         22     ;
                         23     ;  User-defined Power-On Initialization of Memory
                         24     ;
                         25     ;  With the following EQU statements the initialization of memory
                         26     ;  at processor reset can be defined:
                         27     ;
                         28     ;               ; the absolute start-address of IDATA memory is always 0
 0100                    29     IDATALEN        EQU     100H    ; the length of IDATA memory in bytes.
                         30     ;
 B000                    31     XDATASTART      EQU     0B000H  ; the absolute start-address of XDATA memory
 0200                    32     XDATALEN        EQU     0200H   ; the length of XDATA memory in bytes.
                         33     ;
 0000                    34     PDATASTART      EQU     0H      ; the absolute start-address of PDATA memory
 0000                    35     PDATALEN        EQU     0H      ; the length of PDATA memory in bytes.
                         36     ;
                         37     ;  Notes:  The IDATA space overlaps physically the DATA and BIT areas of the
                         38     ;          8051 CPU. At minimum the memory space occupied from the C51 
                         39     ;          run-time routines must be set to zero.
                         40     ;------------------------------------------------------------------------------
                         41     ; 
                         42     ;  Reentrant Stack Initilization
                         43     ;
                         44     ;  The following EQU statements define the stack pointer for reentrant
                         45     ;  functions and initialized it:
                         46     ;
                         47     ;  Stack Space for reentrant functions in the SMALL model.
 0000                    48     IBPSTACK        EQU     0       ; set to 1 if small reentrant is used.
 0100                    49     IBPSTACKTOP     EQU     0FFH+1  ; set top of stack to highest location+1.
                         50     ; 
AX51 MACRO ASSEMBLER  TT40_STARTUP                                                          01/25/07 14:37:10 PAGE     2

                         51     ;  Stack Space for reentrant functions in the LARGE model.      
 0000                    52     XBPSTACK        EQU     0       ; set to 1 if large reentrant is used.
 00010000                53     XBPSTACKTOP     EQU     0FFFFH+1; set top of stack to highest location+1.
                         54     ;
                         55     ;  Stack Space for reentrant functions in the COMPACT model.    
 0000                    56     PBPSTACK        EQU     0       ; set to 1 if compact reentrant is used.
 00010000                57     PBPSTACKTOP     EQU     0FFFFH+1; set top of stack to highest location+1.
                         58     ;
                         59     ;------------------------------------------------------------------------------
                         60     ;
                         61     ;  Page Definition for Using the Compact Model with 64 KByte xdata RAM
                         62     ;
                         63     ;  The following EQU statements define the xdata page used for pdata
                         64     ;  variables. The EQU PPAGE must conform with the PPAGE control used
                         65     ;  in the linker invocation.
                         66     ;
 0000                    67     PPAGEENABLE     EQU     0       ; set to 1 if pdata object are used.
 0000                    68     PPAGE           EQU     0       ; define PPAGE number.
                         69     ;
                         70     ;------------------------------------------------------------------------------
                         71     
                         72     
                         73                     NAME    ?C_STARTUP
                         74     
                         75     
                         76     ; Declare C_C51STARTUP segment in code memory
------                   77     ?C_C51STARTUP   SEGMENT   CODE
                         78     
                         79     ; Declare STACK as a relocateable code segment of 15 bytes
------                   80     ?STACK          SEGMENT   IDATA 
------                   81                     RSEG    ?STACK
000000                   82                     DS      15
                         83     
                         84     ; Keil specific definition of main function
                         85                     EXTRN CODE (?C_START)
                         86     
                         87     ; Declare C_STARTUP in code segment at 0400h 
                         88                     PUBLIC  ?C_STARTUP
                         89     
000400                   90                     CSEG    AT      0400h
000400 020000     F      91     ?C_STARTUP:     LJMP    STARTUP1
                         92     
                         93     ; Declare C_C51STARTUP as a reloacateable segment
------                   94                     RSEG    ?C_C51STARTUP
                         95     
000000                   96     STARTUP1: ; Initialise IDATA, XDATA (SRAM) and PDATA to zero 
                         97     ; Initialise iData to zero
                         98     IF IDATALEN <> 0
000000 78FF              99                     MOV     R0,#IDATALEN - 1; Initialise R0 with the start address (0) + len
                               gth of IDATA and clear backwards 
000002 E4               100                     CLR     A               ; Clear the accumulator
000003 F6               101     IDATALOOP:      MOV     @R0,A           ; Copy 0 into the address where R0 is pointing a
                               nd... 
000004 D8FD             102                     DJNZ    R0,IDATALOOP    ; ... decrement and jump to IDATALOOP if R0 is n
                               on zero
                        103     ENDIF
                        104     
                        105     ; Initialise the SRAM to zero
                        106     IF XDATALEN <> 0
000006 90B000           107                     MOV     DPTR,#XDATASTART        ; Initialise the data pointer with SRAM 
                               start address
000009 7F00             108                     MOV     R7,#LOW (XDATALEN)      ; Copy the low byte of XDATALEN into R7
                        109     
                        110     ; Convert e.g 0x101 to 0x201 to make the upcoming loop work correctly below 0x100
                        111       IF (LOW (XDATALEN)) <> 0
                                                MOV     R6,#(HIGH XDATALEN) +1
AX51 MACRO ASSEMBLER  TT40_STARTUP                                                          01/25/07 14:37:10 PAGE     3

                                  ELSE
00000B 7E02             114                     MOV     R6,#HIGH (XDATALEN)
                        115       ENDIF
                        116     
00000D E4               117                     CLR     A                       ; Clear the accumulator
00000E F0               118     XDATALOOP:      MOVX    @DPTR,A                 ; Clear the address pointed to by data p
                               ointer
00000F A3               119                     INC     DPTR                    ; Increment the data pointer
000010 DFFC             120                     DJNZ    R7,XDATALOOP            ; Decrement R7 and jump to XDATALOOP if 
                               R7 is non zero 
000012 DEFA             121                     DJNZ    R6,XDATALOOP            ; Decrement R6 and jump to XDATALOOP if 
                               R6 is non zero
                        122     ENDIF
                        123     
                        124     ; Assign the xData page used for pData variables if paged memroy is used 
                        125     IF PPAGEENABLE <> 0
                                                MOV     P2,#PPAGE
                                ENDIF
                        128     
                        129     ; Initialise page memory to zero
                        130     IF PDATALEN <> 0
                                                MOV     R0,#PDATASTART          ; Copy PDATASTART into R0
                                                MOV     R7,#LOW (PDATALEN)      ; Copy the low byte of PDATALEN into R7
                                                CLR     A                       ; Clear the accumulator
                                PDATALOOP:      MOVX    @R0,A                   ; Copy the contents of Accumulator into 
                               the address pointed to by R0
                                                INC     R0                      ; Increment R0 
                                                DJNZ    R7,PDATALOOP            ; Decrement R7 and jump to PDATALOOP if 
                               R7 is non zero
                                ENDIF
                        138     
                        139     ; Initialise the iData stack
                        140     IF IBPSTACK <> 0
                                EXTRN DATA (?C_IBP)
                                
                                                MOV     ?C_IBP,#LOW IBPSTACKTOP
                                ENDIF
                        145     
                        146     ; Initialise the xData stack
                        147     IF XBPSTACK <> 0
                                EXTRN DATA (?C_XBP)
                                
                                                MOV     ?C_XBP,#HIGH XBPSTACKTOP
                                                MOV     ?C_XBP+1,#LOW XBPSTACKTOP
                                ENDIF
                        153     
                        154     ; Initialise the pData stack
                        155     IF PBPSTACK <> 0
                                EXTRN DATA (?C_PBP)
                                                MOV     ?C_PBP,#LOW PBPSTACKTOP
                                ENDIF
                        159     
                        160     ; Load the stack pointer and execute main
000014 758100     F     161                     MOV     SP,#?STACK-1
000017 020000     E     162                     LJMP    ?C_START
                        163     
                        164                     END
                        165     
                        166     
AX51 MACRO ASSEMBLER  TT40_STARTUP                                                          01/25/07 14:37:10 PAGE     4

SYMBOL TABLE LISTING
------ ----- -------


N A M E                             T Y P E  V A L U E     ATTRIBUTES

?C_C51STARTUP. . . . . . . . . . .  C  SEG   00001AH       REL=UNIT, ALN=BYTE
?C_START . . . . . . . . . . . . .  C  ADDR  -------       EXT
?C_STARTUP . . . . . . . . . . . .  C  ADDR  0400H     R   SEG=?CO?TT40_STARTUP?3
?STACK . . . . . . . . . . . . . .  I  SEG   00000FH       REL=UNIT, ALN=BYTE
IBPSTACK . . . . . . . . . . . . .  N  NUMB  0000H     A   
IBPSTACKTOP. . . . . . . . . . . .  N  NUMB  0100H     A   
IDATALEN . . . . . . . . . . . . .  N  NUMB  0100H     A   
IDATALOOP. . . . . . . . . . . . .  C  ADDR  0003H     R   SEG=?C_C51STARTUP
PBPSTACK . . . . . . . . . . . . .  N  NUMB  0000H     A   
PBPSTACKTOP. . . . . . . . . . . .  N  NUMB  00010000H A   
PDATALEN . . . . . . . . . . . . .  N  NUMB  0000H     A   
PDATASTART . . . . . . . . . . . .  N  NUMB  0000H     A   
PPAGE. . . . . . . . . . . . . . .  N  NUMB  0000H     A   
PPAGEENABLE. . . . . . . . . . . .  N  NUMB  0000H     A   
SP . . . . . . . . . . . . . . . .  D  ADDR  0081H     A   
STARTUP1 . . . . . . . . . . . . .  C  ADDR  0000H     R   SEG=?C_C51STARTUP
XBPSTACK . . . . . . . . . . . . .  N  NUMB  0000H     A   
XBPSTACKTOP. . . . . . . . . . . .  N  NUMB  00010000H A   
XDATALEN . . . . . . . . . . . . .  N  NUMB  0200H     A   
XDATALOOP. . . . . . . . . . . . .  C  ADDR  000EH     R   SEG=?C_C51STARTUP
XDATASTART . . . . . . . . . . . .  N  NUMB  B000H     A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S).
