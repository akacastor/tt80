C51 COMPILER V8.05a   WRITE_TO_IRAM                                                        01/25/2007 14:37:14 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE WRITE_TO_IRAM
OBJECT MODULE PLACED IN .\Write_To_IRAM.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\Common\Write_To_IRAM.c OMF2 OPTIMIZE(SIZE) BROWSE INTVECTOR(0X0400) MODD
                    -P2 DEBUG PRINT(.\Write_To_IRAM.lst) OBJECT(.\Write_To_IRAM.obj)

line level    source

   1          /******************************************************************************
   2          *
   3          * Name:         Write_To_IRAM.c
   4          * Description:  Contains function to write input data to IDATA RAM
   5          * Copyright:    Emosyn Inc. 2005
   6          *
   7          * The Example Code herein below is provided "AS IS" and at your sole risk.  
   8          * As to this Code, EMOSYN expressly disclaims all warranties, including, but
   9          * not limited to the implied warranties of merchantability and fitness for a
  10          * particular purpose. EMOSYN does not warrant that the functions contained in
  11          * this code will meet your requirements, or that the operation of the code will
  12          * be accurate, error-free, or non-infringing. No oral or written information or
  13          * advice given by EMOSYN or an authorized representative shall create or affect
  14          * any Warranty.
  15          *******************************************************************************
  16          * $Revision: 1.1 $
  17          * $Author: chin $ 
  18          * $Date: 2006/03/08 16:21:59 $
  19          ******************************************************************************/
  20          
  21          
  22          /******************************************************************************
  23          * Header file inclusions
  24          ******************************************************************************/
  25          #include "Firmware_API_JumpTable.h"
  26          #include "Emosyn_Helper_Functions.h"
  27          
  28          
  29          /******************************************************************************
  30          * External and local function declarations 
  31          ******************************************************************************/
  32          
  33          
  34          /******************************************************************************
  35          * External variable declarations
  36          ******************************************************************************/
  37          
  38          
  39          /******************************************************************************
  40          *
  41          * Function Name:      Write_To_IRAM
  42          * Function Inputs:    void
  43          * Function Outputs:   uint SW1SW2_OK  9000h
  44          * Description:        Writes input data to IDATA
  45          *
  46          * APDU Syntax:        E5 8C 00 PARA2 PARA3
  47          *                     PARA2  IRAM start address to write to
  48          *                     PARA3  Number of bytes to write
  49          * APDU Outputs:       (PARA3) number of RAM data bytes
  50          *
  51          * Example1 usage:     Write 2 bytes (11h 22h) to IDATA start address 40h
  52          * To Card             ->  E5 8C 00 40 02
  53          * ACK from Card       <-  8C
  54          * Data from Card      ->  11 22
C51 COMPILER V8.05a   WRITE_TO_IRAM                                                        01/25/2007 14:37:14 PAGE 2   

  55          * Response from Card  <-  90 00
  56          *
  57          ******************************************************************************/
  58          uint Write_To_IRAM (void)
  59          {
  60   1          IDATA_PTR = PARA2; /* Point to IDATA location to write to */
*** WARNING C289 IN LINE 60 OF ..\COMMON\WRITE_TO_IRAM.C: '=': converting non-pointer to pointer
  61   1      
  62   1          /* A DO-WHILE loop enables 256 bytes to be sent */
  63   1          /* User needs to set PARA3 = 00 for 256 byte output */
  64   1          do
  65   1          {
  66   2              *(IDATA_PTR++) =  GetChar();    /* Get the value to write to RAM */
  67   2          } while ((--PARA3) != 0);       /* Output byte until counter is zero */
  68   1      
  69   1          return SW1SW2_OK;
  70   1      
  71   1      } /* End of function */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     26    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
