C51 COMPILER V7.50   ISO_SELECT_SPEED                                                      12/28/2006 17:29:40 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE ISO_SELECT_SPEED
OBJECT MODULE PLACED IN .\ISO_Select_Speed.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\Common\ISO_Select_Speed.c OMF2 OPTIMIZE(SIZE) BROWSE INTVECTOR(0X0800) M
                    -ODDP2 DEBUG PRINT(.\ISO_Select_Speed.lst) OBJECT(.\ISO_Select_Speed.obj)

line level    source

   1          /******************************************************************************
   2          *
   3          * Name:         ISO_Select_Speed.c
   4          * Description:  Contains function to set IO serial clock speed from user input (FiDi)
   5          * Copyright:    Emosyn Inc. 2005
   6          *
   7          * The Example Code herein below is provided "AS IS" and at your sole risk.  
   8          * As to this Code, EMOSYN expressly disclaims all warranties, including, but
   9          * not limited to the implied warranties of merchantability and fitness for a
  10          * particular purpose. EMOSYN does not warrant that the functions contained in
  11          * this code will meet your requirements, or that the operation of the code will
  12          * be accurate, error-free, or non-infringing. No oral or written information or
  13          * advice given by EMOSYN or an authorized representative shall create or affect
  14          * any Warranty.
  15          *******************************************************************************
  16          * $Revision: 1.3 $
  17          * $Author: amorris $ 
  18          * $Date: 2005/10/25 10:20:26 $
  19          ******************************************************************************/
  20          
  21          
  22          /******************************************************************************
  23          * Header file inclusions
  24          ******************************************************************************/
  25          #include "Firmware_API_JumpTable.h"
  26          #include "Emosyn_Helper_Functions.h"
  27          #include "../common/Emosyn_Clock_Speeds.h"
  28          
  29          
  30          /******************************************************************************
  31          * External and local function declarations 
  32          ******************************************************************************/
  33          
  34          
  35          /******************************************************************************
  36          * External variable declarations
  37          ******************************************************************************/
  38          
  39          
  40          /******************************************************************************
  41          *
  42          * Function Name:      ISO_Select_Speed
  43          * Function Inputs:    uchar FiDi            Byte containing Fi & Di value
  44          *                     uchar ucCommand_Type  Type of baud change
  45          *                                           states if return value is needed
  46          * Function Outputs:   void
  47          * Description:        Changes the ISO serial clock if possible based on FiDi
  48          *                     ISOTMR value = (Frequency / Divider) - 1
  49          *                     ISOTMR is an 11-bit counter loaded through the 8 bit
  50          *                     ISOTMR SFR 
  51          *                     It uses 2 register writes to load the 11 bits needed
  52          *                     First write -  loads bits 11, 10 and 9 into the ISOTMR SFR
  53          *                     Second write - loads bits 8, 7, 6, 5, 4, 3, 2, 1 and 0
  54          *                     The second write does not overwrite the first bits loaded
C51 COMPILER V7.50   ISO_SELECT_SPEED                                                      12/28/2006 17:29:40 PAGE 2   

  55          *                     the SFR adjusts automatically
  56          *
  57          ******************************************************************************/
  58          void ISO_Select_Speed (uchar FiDi, uchar ucCommand_Type)
  59          {
  60   1          uint idata F = 372;
  61   1              uint idata D = 1;
  62   1          uint idata ISO_Timer_Val = 371;
  63   1              
  64   1              switch (FiDi >> 4) /* Select the frequency nibble (upper nibble) */
  65   1          {
  66   2              case 0x02:  F = 558;  break;
  67   2              case 0x03:  F = 744;  break;
  68   2              case 0x04:  F = 1116; break;
  69   2              case 0x05:  F = 1488; break;
  70   2              case 0x06:  F = 1860; break;
  71   2              case 0x09:  F = 512;  break;
  72   2              case 0x0A:  F = 768;  break;
  73   2              case 0x0B:  F = 1024; break;
  74   2              case 0x0C:  F = 1536; break;
  75   2              case 0x0D:  F = 2048; break;
  76   2                      default:    F = 372;  break;
  77   2          }
  78   1      
  79   1          switch (FiDi & 0x0F) /* Select the divider nibble (lower nibble) */
  80   1          {
  81   2              case 0x02:  D = 2;    break;
  82   2              case 0x03:  D = 4;    break;
  83   2              case 0x04:  D = 8;    break;
  84   2              case 0x05:  D = 16;   break;
  85   2              case 0x06:  D = 32;   break;
  86   2              case 0x08:  D = 12;   break;
  87   2              case 0x09:  D = 20;   break;
  88   2                      default:    D = 1;    break;
  89   2          }
  90   1      
  91   1          /* Calculate the timer value based on the F and D values */
  92   1          ISO_Timer_Val = (F / D) - 1;
  93   1      
  94   1          /******************************************************************************
  95   1          * If the D value is supported it will return the confimration bytes if required
  96   1          * If the D value is not supported it will return the failure bytes based on
  97   1          * what type of baud change is calling this function (PPS, APDU or none)
  98   1          *******************************************************************************/
  99   1      
 100   1              /* We only allow 9600 (D = 31) & 115K (D = 371) baud because of SwiftSIM limitations */ 
 101   1              /* Emosyn silicon is not limited to these speeds */
 102   1              if((ISO_Timer_Val == 0x1F) || (ISO_Timer_Val == 0x173))
 103   1              {
 104   2              if (ucCommand_Type == PPS_BAUD_CMD)
 105   2              {
 106   3                  /* Echo back the 4 byte command */
 107   3                  Serial_Transmit_X_Bytes (APDU_HEADER_LENGTH - 1, &CLA);
 108   3              }
 109   2      
 110   2              if (ucCommand_Type == APDU_BAUD_CMD)
 111   2              {
 112   3                  SW1SW2 = SW1SW2_OK;
 113   3                  Serial_Transmit_X_Bytes (0x02, (uchar *)&SW1SW2);
 114   3              }
 115   2      
 116   2                  /* Load ISOTMR SFR with high part of desired value */
C51 COMPILER V7.50   ISO_SELECT_SPEED                                                      12/28/2006 17:29:40 PAGE 3   

 117   2              ISOTMR = ISO_Timer_Val >> 8;
 118   2      
 119   2              /* Load ISOTMR SFR with low part of desired value */
 120   2              ISOTMR = ISO_Timer_Val & 0xFF;
 121   2              }
 122   1      
 123   1          else
 124   1          {
 125   2              if (ucCommand_Type == PPS_BAUD_CMD)
 126   2              {
 127   3                  PutChar (0xFF); /* Output an invalid PPS response */
 128   3                      PutChar (0x00);
 129   3                      PutChar (0xFF);
 130   3                      PutChar (0x00);
 131   3              }
 132   2      
 133   2              if (ucCommand_Type == APDU_BAUD_CMD)
 134   2              {
 135   3                  SW1SW2 = SW1SW2_INCORRECT_PARA;
 136   3                  Serial_Transmit_X_Bytes (0x02, (uchar *)&SW1SW2);
 137   3              }
 138   2          }
 139   1              
 140   1      } /* End of function */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    387    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----       6
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
