C51 COMPILER V7.50   WRITE_X_BYTES_TO_UCM_CODE_SPACE                                       12/28/2006 17:29:42 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE WRITE_X_BYTES_TO_UCM_CODE_SPACE
OBJECT MODULE PLACED IN .\Write_X_Bytes_To_UCM_CODE_Space.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\Common\Write_X_Bytes_To_UCM_CODE_Space.c OMF2 OPTIMIZE(SIZE) BROWSE INTV
                    -ECTOR(0X0800) MODDP2 DEBUG PRINT(.\Write_X_Bytes_To_UCM_CODE_Space.lst) OBJECT(.\Write_X_Bytes_To_UCM_CODE_Space.obj)

line level    source

   1          /******************************************************************************
   2          *
   3          * Name:         Write_X_Bytes_To_UCM_CODE_Space.c
   4          * Description:  Contains function to write X number of bytes to UCM CODE memory
   5          * Copyright:    Emosyn Inc. 2006
   6          *
   7          * The Example Code herein below is provided "AS IS" and at your sole risk.  
   8          * As to this Code, EMOSYN expressly disclaims all warranties, including, but
   9          * not limited to the implied warranties of merchantability and fitness for a
  10          * particular purpose. EMOSYN does not warrant that the functions contained in
  11          * this code will meet your requirements, or that the operation of the code will
  12          * be accurate, error-free, or non-infringing. No oral or written information or
  13          * advice given by EMOSYN or an authorized representative shall create or affect
  14          * any Warranty.
  15          *******************************************************************************
  16          * $Revision: 1.1 $
  17          * $Author: chin $ 
  18          * $Date: 2006/02/22 15:47:58 $
  19          ******************************************************************************/
  20          
  21          
  22          /******************************************************************************
  23          * Header file inclusions
  24          ******************************************************************************/
  25          #include "Firmware_API_JumpTable.h"
  26          #include "Emosyn_Helper_Functions.h"
  27          
  28          /******************************************************************************
  29          * External and local function declarations 
  30          ******************************************************************************/
  31          
  32          
  33          /******************************************************************************
  34          * External variable declarations
  35          ******************************************************************************/
  36          
  37          /******************************************************************************
  38          *
  39          * Function Name:      Write_X_Bytes_To_UCM_CODE_Space
  40          * Function Inputs:    void 
  41          * Function Outputs:   uint SW1SW2  9000h for success or
  42          *                                  6581h for memory failure or
  43          * Description:        Writes X bytes to UCM CODE memory
  44          *
  45          * APDU Syntax:        E5 E2 PARA1 PARA2 PARA3
  46          * APDU Inputs:        PARA1      High byte of the UCM address space
  47          *                     PARA2      Low byte of the UCM address space
  48          *                     PARA3      Number of bytes to write
  49          *                     DataBytes  Data bytes to write
  50          * APDU Outputs:       None
  51          *
  52          * Example usage:      Write 8 bytes to to UCM CODE address 1234h
  53          * To Card             ->  E5 E2 12 34 08
  54          * ACK from Card       <-  E2
C51 COMPILER V7.50   WRITE_X_BYTES_TO_UCM_CODE_SPACE                                       12/28/2006 17:29:42 PAGE 2   

  55          * Data to Card        ->  01 02 03 04 05 06 07 08
  56          * Response from Card  <-  90 00
  57          *
  58          ******************************************************************************/
  59          uint Write_X_Bytes_To_UCM_CODE_Space (void)
  60          {
  61   1          SW1SW2 = SW1SW2_OK;  /* Initialise status word to OK */
  62   1      
  63   1          /* Convert passed in start address parameters into integer */
  64   1          uiTemp_Address = Conv_Two_Bytes_To_Int (PARA1, PARA2);
  65   1      
  66   1          do 
  67   1          {
  68   2              /* Actual firmware API call */
  69   2              cRet_Val_Char = Firmware_WriteByteUCM_In_CODE_Space (uiTemp_Address, GetChar());
  70   2      
  71   2              PARA3--;            /* If 00 is passed in it means write 256 bytes */
  72   2              uiTemp_Address++;   /* Point to the next memory location to write to */
  73   2      
  74   2              /* Check the firmware call result */
  75   2              if (MSB_SET & cRet_Val_Char)
  76   2              {
  77   3                  SW1SW2 = SW1SW2_MEMORY_ERROR;   /* If MSB of return value set it */
  78   3              }                                   /* indicates a memory operation error */
  79   2          } while (PARA3 > 0); /* loop until PARA3 is zero */
  80   1      
  81   1          return SW1SW2;
  82   1      
  83   1      } /* End of function */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     81    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
